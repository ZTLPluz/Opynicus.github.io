{"meta":{"title":"Opynicus' Soliloquy","subtitle":"欲说还休，却道天凉好个秋","description":"May I stand unshaken","author":"Opynicus","url":"https://ztlpluz.github.io/Opynicus.github.io","root":"/Opynicus.github.io/"},"pages":[{"title":"分类","date":"2021-08-20T01:43:00.000Z","updated":"2021-08-20T01:45:59.863Z","comments":false,"path":"categories/index.html","permalink":"https://ztlpluz.github.io/Opynicus.github.io/categories/index.html","excerpt":"","text":""},{"title":"极其敷衍的自我介绍","date":"2021-08-20T01:43:16.000Z","updated":"2022-05-15T04:42:24.712Z","comments":true,"path":"about/index.html","permalink":"https://ztlpluz.github.io/Opynicus.github.io/about/index.html","excerpt":"","text":"简介​ 这里是Opynicus，欢迎来到我的个人页面。 ​ Opynicus是Opinicus的变体，是一种刻在纹章上的怪物那种，算是狮鹫的一种，拥有狮子的身体，鹰的头与翅膀，样似奇美拉，彰显站长的缝合怪本质 ​ 假二次元+宅，拖延症患者，经常没来由地怀念过去，偶尔想想不远的将来。 ​ 这个博客被搭建出来的目的估计就是个杂记，也可以是cheatsheet,todo-list什么的，差不多是想写啥就写啥，更像是生活总结了，毕竟站长太菜，写不出啥有用的技术性博客。 ​ 其实这样用搭个博客来记录还是图个新鲜，不过最近一段时间也不会有什么技术性的产出了。 ​ 最近准备考研，每天能写的也基本就是些那些东西了罢，倒不如说是基本上没什么好写的了。 兴趣​ 兴趣真的就差不多是玩游戏与听音乐，人菜瘾大，很多类型的游戏都玩，主要还是为了娱乐，没有过多磨练技术的想法，也算是导致了除射击类型外的PVP水平都不高，传统RTS类更算是苦手？不过愿意组车队带基本都还是会玩的，如果是肝通行证的坐牢体验还是算了😄 ​ 当年入steam就是单纯为了联机L4D2（类似入Origin也是为了联机BF4）,挺怀念过去用一张辣鸡gt720顶着延迟与掉帧与同学打L4D2和BF4的欢乐日子 ​ 后来学生党没有配置与时间，玩单机就比较多了，后来到现在就成了传统意义上的单机玩家,尤其钟爱RPG类型 ​ 今年开始执着于游戏全成就，不得不说全成就真是个延长游戏时长的好方法，不过也不是啥游戏都想打全成就就是了，有很大一部分真是有心无力。 ​ 我永远不会放弃游戏.jpg😭， 了转反😋，游戏好像也不是那么重要了，说实话可能确实心态变了，虽说老头环也让我兴奋了好一阵子。。 ​ 听音乐上也是比较杂食，电音、摇滚、民谣、city pop、country、金属什么的都听一些。不过主听EDM和Progressive House，听得最久的还是vicetone和avicii吧。 FIN 感觉反正也没什么人看，就这样吧。"},{"title":"说说","date":"2022-01-26T02:19:27.000Z","updated":"2022-03-18T08:30:02.254Z","comments":false,"path":"talk/index.html","permalink":"https://ztlpluz.github.io/Opynicus.github.io/talk/index.html","excerpt":"","text":"new Artitalk({ appId: '0BupLHmibWXg3w4k2xoMUQRK-MdYXbMMI', appKey: 'KMi09TXaUT7R1Ttx397DbJPf', color1: 'linear-gradient(-45deg, #FFD972, #EFA7A7, #FCBCB8, #A7E8BD) 5% 5% / 400% 400%', color2: 'linear-gradient(45deg, rgb(109, 208, 242) 15%, rgb(245, 154, 190) 85%)', color3: 'rgb(44, 43, 43)', atEmoji: { lea_happy: 'https://s2.loli.net/2022/01/28/6R5ntgpLVlYMidD.png', lea_blink: 'https://s2.loli.net/2022/01/28/KQSaUp7DzkVMjsI.png', lea_juezui: 'https://s2.loli.net/2022/01/28/sfS8yJQZTN9HWtx.png', lea_curious: 'https://s2.loli.net/2022/01/28/Yb1SCBVdkv4qh9K.png', lea_mad: 'https://s2.loli.net/2022/01/28/F2qo95QW4YzhbU3.png', lea_weep: 'https://s2.loli.net/2022/01/28/toO7NXesKSp4PdY.png', lea_sweat: 'https://s2.loli.net/2022/01/28/rszqyLck5bndxRG.png', lea_shock: 'https://s2.loli.net/2022/01/28/cgPilJMCXxvOjnk.png', }, }) 看不到内容请刷新此页面，it's a feature, not a bug("},{"title":"自娱自乐","date":"2021-08-31T01:57:31.000Z","updated":"2022-03-16T12:10:14.711Z","comments":false,"path":"music/index.html","permalink":"https://ztlpluz.github.io/Opynicus.github.io/music/index.html","excerpt":"","text":"mikutap remake模拟器 你懂的，嘿嘿🤤 WaifuLabs nodesign"},{"title":"标签","date":"2021-08-20T01:43:08.000Z","updated":"2022-01-28T02:36:03.242Z","comments":false,"path":"tags/index.html","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-08-20T10:11:56.473Z","updated":"2021-08-20T10:11:56.473Z","comments":true,"path":"lib/canvas-nest/README.html","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/canvas-nest/README.html","excerpt":"","text":"Theme NexT Canvas Nest canvas-nest.js for NexT. InstallStep 1 &rarr; Go to Hexo dirChange dir to Hexo directory. There must be scaffolds, source, themes and other directories: 123$ cd hexo$ lsscaffolds source themes _config.yml package.json Step 2 &rarr; Create footer.swigCreate a file named footer.swig in hexo/source/_data directory (create _data directory if it does not exist). Edit this file and add the following content: 1&lt;script color=&quot;0,0,255&quot; opacity=&quot;0.5&quot; zIndex=&quot;-1&quot; count=&quot;99&quot; src=&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;&gt;&lt;/script&gt; You can customize these options. Step 3 &rarr; Set it upIn the NexT _config.yml, uncomment footer under the custom_file_path section. 12345678910111213# Define custom file paths.# Create your custom files in site directory `source/_data` and uncomment needed files below.custom_file_path: #head: source/_data/head.swig #header: source/_data/header.swig #sidebar: source/_data/sidebar.swig #postMeta: source/_data/post-meta.swig #postBodyEnd: source/_data/post-body-end.swig footer: source/_data/footer.swig #bodyEnd: source/_data/body-end.swig #variable: source/_data/variables.styl #mixin: source/_data/mixins.styl #style: source/_data/styles.styl"},{"title":"","date":"2021-08-20T10:11:56.473Z","updated":"2021-08-20T10:11:56.473Z","comments":true,"path":"lib/canvas-nest/canvas-nest.min.js","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/canvas-nest/canvas-nest.min.js","excerpt":"","text":"!function(){function o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(\"script\"),w=i.length,v=i[w-1];return{l:w,z:o(v,\"zIndex\",-1),o:o(v,\"opacity\",0.5),c:o(v,\"color\",\"0,0,0\"),n:o(v,\"count\",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.xn||i.y"},{"title":"","date":"2021-08-20T10:11:56.473Z","updated":"2021-08-20T10:11:56.473Z","comments":true,"path":"lib/canvas-nest/canvas-nest-nomobile.min.js","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/canvas-nest/canvas-nest-nomobile.min.js","excerpt":"","text":"!function(){ var userAgentInfo = navigator.userAgent; var Agents = [\"iPad\", \"iPhone\", \"Android\", \"SymbianOS\", \"Windows Phone\", \"iPod\", \"webOS\", \"BlackBerry\", \"IEMobile\"]; for (var v = 0; v < Agents.length; v++) { if (userAgentInfo.indexOf(Agents[v]) > 0) { return; } } function o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(\"script\"),w=i.length,v=i[w-1];return{l:w,z:o(v,\"zIndex\",-1),o:o(v,\"opacity\",0.5),c:o(v,\"color\",\"0,0,0\"),n:o(v,\"count\",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.xn||i.y"},{"title":"","date":"2021-08-21T01:21:15.137Z","updated":"2021-08-21T01:21:15.137Z","comments":true,"path":"lib/three/README.html","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/three/README.html","excerpt":"","text":"JavaScript 3D library for NexT Installation If you want to use the CDN instead of clone this repo, please jump to the Step 3. Step 1 &rarr; Go to NexT dir Change dir to NexT directory. There must be layout, source, languages and other directories: 123$ cd themes/next$ ls_config.yml crowdin.yml docs gulpfile.js languages layout LICENSE.md package.json README.md scripts source Step 2 &rarr; Get module Install module to source/lib directory: 1$ git clone https://github.com/theme-next/theme-next-three source/lib/three Step 3 &rarr; Set it up Enable module in NexT _config.yml file: 12345three_waves: trueORcanvas_lines: trueORcanvas_sphere: true And, if you wants to use the CDN, then need to set: 123456vendors: ... three: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/three.min.js three_waves: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@latest/three-waves.min.js canvas_lines: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@latest/canvas_lines.min.js canvas_sphere: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@latest/canvas_sphere.min.js Update 12$ cd themes/next/source/lib/three$ git pull"},{"title":"","date":"2021-08-21T01:21:15.140Z","updated":"2021-08-21T01:21:15.140Z","comments":true,"path":"lib/three/package.json","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/three/package.json","excerpt":"","text":"{\"name\":\"theme-next-three\",\"version\":\"1.0.0\",\"main\":\"index.js\",\"repository\":\"git@github.com:theme-next/theme-next-three.git\",\"author\":\"Raincal \",\"license\":\"MIT\",\"scripts\":{\"build\":\"gulp\"},\"dependencies\":{\"del\":\"^5.1.0\",\"gulp\":\"^4.0.2\",\"gulp-concat\":\"^2.6.1\",\"gulp-uglify\":\"^3.0.2\"}}"},{"title":"","date":"2021-08-21T01:21:15.140Z","updated":"2021-08-21T01:21:15.140Z","comments":true,"path":"lib/three/renovate.json","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/three/renovate.json","excerpt":"","text":"{\"extends\":[\"config:base\"]}"},{"title":"","date":"2021-08-21T01:21:15.137Z","updated":"2021-08-21T01:21:15.137Z","comments":true,"path":"lib/three/gulpfile.js","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/three/gulpfile.js","excerpt":"","text":"const fs = require('fs') const del = require('del') const gulp = require('gulp') const concat = require('gulp-concat') const uglify = require('gulp-uglify') gulp.task('clean', async () => { del(['*.min.js', '!three.min.js']) }) gulp.task('scripts', async () => { const sourceFiles = fs.readdirSync('src') sourceFiles.forEach(file => { const fileName = file.split('.')[0] return gulp.src([`src/${fileName}.js`, 'lib/*.js']) .pipe(concat(`${fileName}.min.js`)) .pipe(uglify()) .pipe(gulp.dest('./')) }) }) gulp.task('default', gulp.series('clean', 'scripts'))"},{"title":"","date":"2021-08-21T01:21:15.140Z","updated":"2021-08-21T01:21:15.140Z","comments":true,"path":"lib/three/src/canvas_sphere.js","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/three/src/canvas_sphere.js","excerpt":"","text":"/** * Created by Tang on 2017/4/15. */ $(function () { var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight, mouseX = 0, mouseY = 0, windowHalfX = window.innerWidth / 2, windowHalfY = window.innerHeight / 2, SEPARATION = 200, AMOUNTX = 10, AMOUNTY = 10, camera, scene, renderer; init(); animate(); function init() { var container, separation = 100, amountX = 50, amountY = 50, particles, particle; container = document.createElement('div'); // 设置css container.style.position = \"fixed\"; container.style.top = \"0px\"; container.style.left = \"0px\"; container.style.zIndex = \"-1\"; container.style.opacity = \"0.5\"; document.body.appendChild(container); camera = new THREE.PerspectiveCamera(75, SCREEN_WIDTH / SCREEN_HEIGHT, 1, 10000); camera.position.z = 1000; scene = new THREE.Scene(); renderer = new THREE.CanvasRenderer({ alpha: true }); renderer.setPixelRatio(window.devicePixelRatio); renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT); container.appendChild(renderer.domElement); // particles var PI2 = Math.PI * 2; var material = new THREE.SpriteCanvasMaterial({ color: 10263708, program: function (context) { context.beginPath(); context.arc(0, 0, 0.5, 0, PI2, true); context.fill(); } }); for (var i = 0; i < 1000; i++) { particle = new THREE.Sprite(material); particle.position.x = Math.random() * 2 - 1; particle.position.y = Math.random() * 2 - 1; particle.position.z = Math.random() * 2 - 1; particle.position.normalize(); particle.position.multiplyScalar(Math.random() * 10 + 450); particle.scale.multiplyScalar(2); scene.add(particle); } // lines for (var i = 0; i < 300; i++) { var geometry = new THREE.Geometry(); var vertex = new THREE.Vector3(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1); vertex.normalize(); vertex.multiplyScalar(450); geometry.vertices.push(vertex); var vertex2 = vertex.clone(); vertex2.multiplyScalar(Math.random() * 0.3 + 1); geometry.vertices.push(vertex2); var line = new THREE.Line(geometry, new THREE.LineBasicMaterial({ color: 10263708, opacity: Math.random() })); scene.add(line); } document.addEventListener('mousemove', onDocumentMouseMove, false); document.addEventListener('touchstart', onDocumentTouchStart, false); document.addEventListener('touchmove', onDocumentTouchMove, false); // window.addEventListener('resize', onWindowResize, false); } function onWindowResize() { windowHalfX = window.innerWidth / 2; windowHalfY = window.innerHeight / 2; camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight); } // function onDocumentMouseMove(event) { mouseX = event.clientX - windowHalfX; mouseY = event.clientY - windowHalfY; } function onDocumentTouchStart(event) { if (event.touches.length > 1) { //event.preventDefault(); mouseX = event.touches[0].pageX - windowHalfX; //mouseY = event.touches[ 0 ].pageY - windowHalfY; } } function onDocumentTouchMove(event) { if (event.touches.length == 1) { //event.preventDefault(); mouseX = event.touches[0].pageX - windowHalfX; //mouseY = event.touches[ 0 ].pageY - windowHalfY; } } // function animate() { requestAnimationFrame(animate); render(); } function render() { camera.position.x += (mouseX - camera.position.x) * .05; camera.position.y += (-mouseY + 200 - camera.position.y) * .05; camera.lookAt(scene.position); renderer.render(scene, camera); } })"},{"title":"","date":"2021-08-21T01:21:15.140Z","updated":"2021-08-21T01:21:15.140Z","comments":true,"path":"lib/three/src/canvas_lines.js","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/three/src/canvas_lines.js","excerpt":"","text":"/** * Created by Tang on 2017/4/15. */ $(function () { var mouseX = 0, mouseY = 0, windowHalfX = window.innerWidth / 2, windowHalfY = window.innerHeight / 2, SEPARATION = 200, AMOUNTX = 10, AMOUNTY = 10, camera, scene, renderer; init(); animate(); function init() { var container, separation = 100, amountX = 50, amountY = 50, particles, particle; container = document.createElement('div'); // 设置css container.style.position = \"fixed\"; container.style.top = \"0px\"; container.style.left = \"0px\"; container.style.zIndex = \"-1\"; container.style.opacity = \"0.5\"; document.body.appendChild(container); camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000); camera.position.z = 100; scene = new THREE.Scene(); renderer = new THREE.CanvasRenderer({ alpha: true }); renderer.setPixelRatio(window.devicePixelRatio); renderer.setSize(window.innerWidth, window.innerHeight); container.appendChild(renderer.domElement); // particles var PI2 = Math.PI * 2; var material = new THREE.SpriteCanvasMaterial({ color: 10263708, program: function (context) { context.beginPath(); context.arc(0, 0, 0.5, 0, PI2, true); context.fill(); } }); var geometry = new THREE.Geometry(); for (var i = 0; i < 100; i++) { particle = new THREE.Sprite(material); particle.position.x = Math.random() * 2 - 1; particle.position.y = Math.random() * 2 - 1; particle.position.z = Math.random() * 2 - 1; particle.position.normalize(); particle.position.multiplyScalar(Math.random() * 10 + 450); particle.scale.x = particle.scale.y = 10; scene.add(particle); geometry.vertices.push(particle.position); } // lines var line = new THREE.Line(geometry, new THREE.LineBasicMaterial({ color: 10263708, opacity: 0.5 })); scene.add(line); document.addEventListener('mousemove', onDocumentMouseMove, false); document.addEventListener('touchstart', onDocumentTouchStart, false); document.addEventListener('touchmove', onDocumentTouchMove, false); // window.addEventListener('resize', onWindowResize, false); } function onWindowResize() { windowHalfX = window.innerWidth / 2; windowHalfY = window.innerHeight / 2; camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight); } // function onDocumentMouseMove(event) { mouseX = event.clientX - windowHalfX; mouseY = event.clientY - windowHalfY; } function onDocumentTouchStart(event) { if (event.touches.length > 1) { //event.preventDefault(); mouseX = event.touches[0].pageX - windowHalfX; //mouseY = event.touches[ 0 ].pageY - windowHalfY; } } function onDocumentTouchMove(event) { if (event.touches.length == 1) { //event.preventDefault(); mouseX = event.touches[0].pageX - windowHalfX; //mouseY = event.touches[ 0 ].pageY - windowHalfY; } } // function animate() { requestAnimationFrame(animate); render(); } function render() { camera.position.x += (mouseX - camera.position.x) * .05; camera.position.y += (-mouseY + 200 - camera.position.y) * .05; camera.lookAt(scene.position); renderer.render(scene, camera); } })"},{"title":"","date":"2021-08-21T01:21:15.140Z","updated":"2021-08-21T01:21:15.140Z","comments":true,"path":"lib/three/src/three-waves.js","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/three/src/three-waves.js","excerpt":"","text":"$(function () { var SEPARATION = 100, AMOUNTX = 50, AMOUNTY = 50; var container; var camera, scene, renderer; var particles, particle, count = 0; var mouseX = 0, mouseY = 0; var windowHalfX = window.innerWidth / 2; var windowHalfY = window.innerHeight / 2; init(); animate(); function init() { container = document.createElement(\"div\"); container.style.position = \"fixed\"; container.style.top = \"0px\"; container.style.left = \"0px\"; container.style.zIndex = \"-1\"; container.style.opacity = \"0.5\"; document.body.appendChild(container); camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000); camera.position.z = 1000; scene = new THREE.Scene(); particles = new Array(); var PI2 = Math.PI * 2; var material = new THREE.SpriteCanvasMaterial({ color: 10263708, program: function (context) { context.beginPath(); context.arc(0, 0, 0.5, 0, PI2, true); context.fill() } }); var i = 0; for (var ix = 0; ix < AMOUNTX; ix++) { for (var iy = 0; iy < AMOUNTY; iy++) { particle = particles[i++] = new THREE.Sprite(material); particle.position.x = ix * SEPARATION - ((AMOUNTX * SEPARATION) / 2); particle.position.z = iy * SEPARATION - ((AMOUNTY * SEPARATION) / 2); scene.add(particle) } } renderer = new THREE.CanvasRenderer({ alpha: true }); renderer.setPixelRatio(window.devicePixelRatio); renderer.setSize(window.innerWidth, window.innerHeight); container.appendChild(renderer.domElement); document.addEventListener(\"mousemove\", onDocumentMouseMove, false); window.addEventListener(\"resize\", onWindowResize, false) } function onWindowResize() { windowHalfX = window.innerWidth / 2; windowHalfY = window.innerHeight / 2; camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight) } function onDocumentMouseMove(event) { mouseX = event.clientX - windowHalfX } function animate() { requestAnimationFrame(animate); render() } function render() { camera.position.x += (mouseX - camera.position.x) * 0.05; camera.position.y = 362.05; camera.lookAt({ x: scene.position.x, y: window.innerHeight / 3, z: scene.position.z }); var i = 0; for (var ix = 0; ix < AMOUNTX; ix++) { for (var iy = 0; iy < AMOUNTY; iy++) { particle = particles[i++]; particle.position.y = (Math.sin((ix + count) * 0.3) * 50) + (Math.sin((iy + count) * 0.5) * 50); particle.scale.x = particle.scale.y = (Math.sin((ix + count) * 0.3) + 1) * 4 + (Math.sin((iy + count) * 0.5) + 1) * 4 } } renderer.render(scene, camera); count += 0.1 } });"},{"title":"","date":"2021-08-21T01:21:15.137Z","updated":"2021-08-21T01:21:15.137Z","comments":true,"path":"lib/three/canvas_lines.min.js","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/three/canvas_lines.min.js","excerpt":"","text":"THREE.SpriteCanvasMaterial=function(e){THREE.Material.call(this),this.type=\"SpriteCanvasMaterial\",this.color=new THREE.Color(16777215),this.program=function(e,t){},this.setValues(e)},THREE.SpriteCanvasMaterial.prototype=Object.create(THREE.Material.prototype),THREE.SpriteCanvasMaterial.prototype.constructor=THREE.SpriteCanvasMaterial,THREE.SpriteCanvasMaterial.prototype.clone=function(){var e=new THREE.SpriteCanvasMaterial;return e.copy(this),e.color.copy(this.color),e.program=this.program,e},THREE.CanvasRenderer=function(e){console.log(\"THREE.CanvasRenderer\",THREE.REVISION),e=e||{};var s,l,c,p,E,d,h,f,u,m,v,x,R,y,T,w,H,g,S,M=this,b=new THREE.Projector,r=void 0!==e.canvas?e.canvas:document.createElement(\"canvas\"),C=r.width,z=r.height,V=Math.floor(C/2),j=Math.floor(z/2),L=0,O=0,B=C,W=z,n=1,P=r.getContext(\"2d\",{alpha:!0===e.alpha}),i=new THREE.Color(0),o=!0===e.alpha?0:1,a=1,k=0,N=null,F=null,A=null,I=null,D=null,t=[],G=(new THREE.RenderableVertex,new THREE.RenderableVertex,new THREE.Color),U=(new THREE.Color,new THREE.Color,new THREE.Color,new THREE.Color,new THREE.Color),q=new THREE.Color,X=new THREE.Color,J={},Y=new THREE.Box2,$=new THREE.Box2,K=new THREE.Box2,Q=new THREE.Color,Z=new THREE.Color,_=new THREE.Color,ee=new THREE.Vector3,te=new THREE.Vector3,ie=new THREE.Vector3,re=new THREE.Matrix3;function ne(e,t,i){de(i.opacity),he(i.blending);var r=t.scale.x*V,n=t.scale.y*j,o=.5*Math.sqrt(r*r+n*n);if(K.min.set(e.x-o,e.y-o),K.max.set(e.x+o,e.y+o),i instanceof THREE.SpriteMaterial){var a=i.map;if(null!==a){var s=J[a.id];if(void 0!==s&&s.version===a.version||(s=ce(a),J[a.id]=s),void 0!==s.canvas){xe(s.canvas);var l=a.image,c=l.width*a.offset.x,p=l.height*a.offset.y,E=l.width*a.repeat.x,d=l.height*a.repeat.y,h=r/E,f=n/d;P.save(),P.translate(e.x,e.y),0!==i.rotation&&P.rotate(i.rotation),P.translate(-r/2,-n/2),P.scale(h,f),P.translate(-c,-p),P.fillRect(c,p,E,d),P.restore()}}else xe(i.color.getStyle()),P.save(),P.translate(e.x,e.y),0!==i.rotation&&P.rotate(i.rotation),P.scale(r,-n),P.fillRect(-.5,-.5,1,1),P.restore()}else i instanceof THREE.SpriteCanvasMaterial&&(ve(i.color.getStyle()),xe(i.color.getStyle()),P.save(),P.translate(e.x,e.y),0!==i.rotation&&P.rotate(i.rotation),P.scale(r,n),i.program(P),P.restore())}function oe(e,t,i,r){if(de(r.opacity),he(r.blending),P.beginPath(),P.moveTo(e.positionScreen.x,e.positionScreen.y),P.lineTo(t.positionScreen.x,t.positionScreen.y),r instanceof THREE.LineBasicMaterial){if(fe(r.linewidth),ue(r.linecap),me(r.linejoin),r.vertexColors!==THREE.VertexColors)ve(r.color.getStyle());else{var n=i.vertexColors[0].getStyle(),o=i.vertexColors[1].getStyle();if(n===o)ve(n);else{try{var a=P.createLinearGradient(e.positionScreen.x,e.positionScreen.y,t.positionScreen.x,t.positionScreen.y);a.addColorStop(0,n),a.addColorStop(1,o)}catch(e){a=n}ve(a)}}P.stroke(),K.expandByScalar(2*r.linewidth)}else r instanceof THREE.LineDashedMaterial&&(fe(r.linewidth),ue(r.linecap),me(r.linejoin),ve(r.color.getStyle()),Re([r.dashSize,r.gapSize]),P.stroke(),K.expandByScalar(2*r.linewidth),Re([]))}function ae(e,t,i,r,n,o,a,s){if(M.info.render.vertices+=3,M.info.render.faces++,de(s.opacity),he(s.blending),h=e.positionScreen.x,f=e.positionScreen.y,u=t.positionScreen.x,m=t.positionScreen.y,v=i.positionScreen.x,x=i.positionScreen.y,function(e,t,i,r,n,o){P.beginPath(),P.moveTo(e,t),P.lineTo(i,r),P.lineTo(n,o),P.closePath()}(h,f,u,m,v,x),(s instanceof THREE.MeshLambertMaterial||s instanceof THREE.MeshPhongMaterial)&&null===s.map)U.copy(s.color),q.copy(s.emissive),s.vertexColors===THREE.FaceColors&&U.multiply(a.color),G.copy(Q),te.copy(e.positionWorld).add(t.positionWorld).add(i.positionWorld).divideScalar(3),function(e,t,i){for(var r=0,n=c.length;r"},{"title":"","date":"2021-08-21T01:24:30.798Z","updated":"2021-08-21T01:21:15.140Z","comments":true,"path":"lib/three/three-waves.min.js","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/three/three-waves.min.js","excerpt":"","text":"THREE.SpriteCanvasMaterial=function(e){THREE.Material.call(this),this.type=\"SpriteCanvasMaterial\",this.color=new THREE.Color(16777215),this.program=function(e,t){},this.setValues(e)},THREE.SpriteCanvasMaterial.prototype=Object.create(THREE.Material.prototype),THREE.SpriteCanvasMaterial.prototype.constructor=THREE.SpriteCanvasMaterial,THREE.SpriteCanvasMaterial.prototype.clone=function(){var e=new THREE.SpriteCanvasMaterial;return e.copy(this),e.color.copy(this.color),e.program=this.program,e},THREE.CanvasRenderer=function(e){console.log(\"THREE.CanvasRenderer\",THREE.REVISION),e=e||{};var s,l,c,p,E,d,f,h,u,m,v,x,R,y,T,w,H,g,S,M=this,b=new THREE.Projector,i=void 0!==e.canvas?e.canvas:document.createElement(\"canvas\"),C=i.width,z=i.height,V=Math.floor(C/2),j=Math.floor(z/2),L=0,O=0,B=C,W=z,n=1,P=i.getContext(\"2d\",{alpha:!0===e.alpha}),r=new THREE.Color(0),o=!0===e.alpha?0:1,a=1,k=0,N=null,F=null,A=null,I=null,D=null,t=[],G=(new THREE.RenderableVertex,new THREE.RenderableVertex,new THREE.Color),U=(new THREE.Color,new THREE.Color,new THREE.Color,new THREE.Color,new THREE.Color),q=new THREE.Color,J=new THREE.Color,X={},$=new THREE.Box2,K=new THREE.Box2,Q=new THREE.Box2,Y=new THREE.Color,Z=new THREE.Color,_=new THREE.Color,ee=new THREE.Vector3,te=new THREE.Vector3,re=new THREE.Vector3,ie=new THREE.Matrix3;function ne(e,t,r){de(r.opacity),fe(r.blending);var i=t.scale.x*V,n=t.scale.y*j,o=.5*Math.sqrt(i*i+n*n);if(Q.min.set(e.x-o,e.y-o),Q.max.set(e.x+o,e.y+o),r instanceof THREE.SpriteMaterial){var a=r.map;if(null!==a){var s=X[a.id];if(void 0!==s&&s.version===a.version||(s=ce(a),X[a.id]=s),void 0!==s.canvas){xe(s.canvas);var l=a.image,c=l.width*a.offset.x,p=l.height*a.offset.y,E=l.width*a.repeat.x,d=l.height*a.repeat.y,f=i/E,h=n/d;P.save(),P.translate(e.x,e.y),0!==r.rotation&&P.rotate(r.rotation),P.translate(-i/2,-n/2),P.scale(f,h),P.translate(-c,-p),P.fillRect(c,p,E,d),P.restore()}}else xe(r.color.getStyle()),P.save(),P.translate(e.x,e.y),0!==r.rotation&&P.rotate(r.rotation),P.scale(i,-n),P.fillRect(-.5,-.5,1,1),P.restore()}else r instanceof THREE.SpriteCanvasMaterial&&(ve(r.color.getStyle()),xe(r.color.getStyle()),P.save(),P.translate(e.x,e.y),0!==r.rotation&&P.rotate(r.rotation),P.scale(i,n),r.program(P),P.restore())}function oe(e,t,r,i){if(de(i.opacity),fe(i.blending),P.beginPath(),P.moveTo(e.positionScreen.x,e.positionScreen.y),P.lineTo(t.positionScreen.x,t.positionScreen.y),i instanceof THREE.LineBasicMaterial){if(he(i.linewidth),ue(i.linecap),me(i.linejoin),i.vertexColors!==THREE.VertexColors)ve(i.color.getStyle());else{var n=r.vertexColors[0].getStyle(),o=r.vertexColors[1].getStyle();if(n===o)ve(n);else{try{var a=P.createLinearGradient(e.positionScreen.x,e.positionScreen.y,t.positionScreen.x,t.positionScreen.y);a.addColorStop(0,n),a.addColorStop(1,o)}catch(e){a=n}ve(a)}}P.stroke(),Q.expandByScalar(2*i.linewidth)}else i instanceof THREE.LineDashedMaterial&&(he(i.linewidth),ue(i.linecap),me(i.linejoin),ve(i.color.getStyle()),Re([i.dashSize,i.gapSize]),P.stroke(),Q.expandByScalar(2*i.linewidth),Re([]))}function ae(e,t,r,i,n,o,a,s){if(M.info.render.vertices+=3,M.info.render.faces++,de(s.opacity),fe(s.blending),f=e.positionScreen.x,h=e.positionScreen.y,u=t.positionScreen.x,m=t.positionScreen.y,v=r.positionScreen.x,x=r.positionScreen.y,function(e,t,r,i,n,o){P.beginPath(),P.moveTo(e,t),P.lineTo(r,i),P.lineTo(n,o),P.closePath()}(f,h,u,m,v,x),(s instanceof THREE.MeshLambertMaterial||s instanceof THREE.MeshPhongMaterial)&&null===s.map)U.copy(s.color),q.copy(s.emissive),s.vertexColors===THREE.FaceColors&&U.multiply(a.color),G.copy(Y),te.copy(e.positionWorld).add(t.positionWorld).add(r.positionWorld).divideScalar(3),function(e,t,r){for(var i=0,n=c.length;i"},{"title":"","date":"2021-08-21T01:21:15.137Z","updated":"2021-08-21T01:21:15.137Z","comments":true,"path":"lib/three/canvas_sphere.min.js","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/three/canvas_sphere.min.js","excerpt":"","text":"THREE.SpriteCanvasMaterial=function(e){THREE.Material.call(this),this.type=\"SpriteCanvasMaterial\",this.color=new THREE.Color(16777215),this.program=function(e,t){},this.setValues(e)},THREE.SpriteCanvasMaterial.prototype=Object.create(THREE.Material.prototype),THREE.SpriteCanvasMaterial.prototype.constructor=THREE.SpriteCanvasMaterial,THREE.SpriteCanvasMaterial.prototype.clone=function(){var e=new THREE.SpriteCanvasMaterial;return e.copy(this),e.color.copy(this.color),e.program=this.program,e},THREE.CanvasRenderer=function(e){console.log(\"THREE.CanvasRenderer\",THREE.REVISION),e=e||{};var s,l,c,p,E,d,h,f,u,m,v,R,x,y,T,w,H,g,S,M=this,b=new THREE.Projector,i=void 0!==e.canvas?e.canvas:document.createElement(\"canvas\"),C=i.width,z=i.height,V=Math.floor(C/2),j=Math.floor(z/2),L=0,O=0,B=C,W=z,n=1,P=i.getContext(\"2d\",{alpha:!0===e.alpha}),r=new THREE.Color(0),o=!0===e.alpha?0:1,a=1,k=0,N=null,F=null,A=null,I=null,D=null,t=[],G=(new THREE.RenderableVertex,new THREE.RenderableVertex,new THREE.Color),U=(new THREE.Color,new THREE.Color,new THREE.Color,new THREE.Color,new THREE.Color),q=new THREE.Color,X=new THREE.Color,J={},Y=new THREE.Box2,$=new THREE.Box2,K=new THREE.Box2,Q=new THREE.Color,Z=new THREE.Color,_=new THREE.Color,ee=new THREE.Vector3,te=new THREE.Vector3,re=new THREE.Vector3,ie=new THREE.Matrix3;function ne(e,t,r){de(r.opacity),he(r.blending);var i=t.scale.x*V,n=t.scale.y*j,o=.5*Math.sqrt(i*i+n*n);if(K.min.set(e.x-o,e.y-o),K.max.set(e.x+o,e.y+o),r instanceof THREE.SpriteMaterial){var a=r.map;if(null!==a){var s=J[a.id];if(void 0!==s&&s.version===a.version||(s=ce(a),J[a.id]=s),void 0!==s.canvas){Re(s.canvas);var l=a.image,c=l.width*a.offset.x,p=l.height*a.offset.y,E=l.width*a.repeat.x,d=l.height*a.repeat.y,h=i/E,f=n/d;P.save(),P.translate(e.x,e.y),0!==r.rotation&&P.rotate(r.rotation),P.translate(-i/2,-n/2),P.scale(h,f),P.translate(-c,-p),P.fillRect(c,p,E,d),P.restore()}}else Re(r.color.getStyle()),P.save(),P.translate(e.x,e.y),0!==r.rotation&&P.rotate(r.rotation),P.scale(i,-n),P.fillRect(-.5,-.5,1,1),P.restore()}else r instanceof THREE.SpriteCanvasMaterial&&(ve(r.color.getStyle()),Re(r.color.getStyle()),P.save(),P.translate(e.x,e.y),0!==r.rotation&&P.rotate(r.rotation),P.scale(i,n),r.program(P),P.restore())}function oe(e,t,r,i){if(de(i.opacity),he(i.blending),P.beginPath(),P.moveTo(e.positionScreen.x,e.positionScreen.y),P.lineTo(t.positionScreen.x,t.positionScreen.y),i instanceof THREE.LineBasicMaterial){if(fe(i.linewidth),ue(i.linecap),me(i.linejoin),i.vertexColors!==THREE.VertexColors)ve(i.color.getStyle());else{var n=r.vertexColors[0].getStyle(),o=r.vertexColors[1].getStyle();if(n===o)ve(n);else{try{var a=P.createLinearGradient(e.positionScreen.x,e.positionScreen.y,t.positionScreen.x,t.positionScreen.y);a.addColorStop(0,n),a.addColorStop(1,o)}catch(e){a=n}ve(a)}}P.stroke(),K.expandByScalar(2*i.linewidth)}else i instanceof THREE.LineDashedMaterial&&(fe(i.linewidth),ue(i.linecap),me(i.linejoin),ve(i.color.getStyle()),xe([i.dashSize,i.gapSize]),P.stroke(),K.expandByScalar(2*i.linewidth),xe([]))}function ae(e,t,r,i,n,o,a,s){if(M.info.render.vertices+=3,M.info.render.faces++,de(s.opacity),he(s.blending),h=e.positionScreen.x,f=e.positionScreen.y,u=t.positionScreen.x,m=t.positionScreen.y,v=r.positionScreen.x,R=r.positionScreen.y,function(e,t,r,i,n,o){P.beginPath(),P.moveTo(e,t),P.lineTo(r,i),P.lineTo(n,o),P.closePath()}(h,f,u,m,v,R),(s instanceof THREE.MeshLambertMaterial||s instanceof THREE.MeshPhongMaterial)&&null===s.map)U.copy(s.color),q.copy(s.emissive),s.vertexColors===THREE.FaceColors&&U.multiply(a.color),G.copy(Q),te.copy(e.positionWorld).add(t.positionWorld).add(r.positionWorld).divideScalar(3),function(e,t,r){for(var i=0,n=c.length;i"},{"title":"","date":"2021-08-21T01:21:15.139Z","updated":"2021-08-21T01:21:15.139Z","comments":true,"path":"lib/three/lib/CanvasRenderer.js","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/three/lib/CanvasRenderer.js","excerpt":"","text":"/** * @author mrdoob / http://mrdoob.com/ */ THREE.SpriteCanvasMaterial = function ( parameters ) { THREE.Material.call( this ); this.type = 'SpriteCanvasMaterial'; this.color = new THREE.Color( 0xffffff ); this.program = function ( context, color ) {}; this.setValues( parameters ); }; THREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype ); THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial; THREE.SpriteCanvasMaterial.prototype.clone = function () { var material = new THREE.SpriteCanvasMaterial(); material.copy( this ); material.color.copy( this.color ); material.program = this.program; return material; }; // THREE.CanvasRenderer = function ( parameters ) { console.log( 'THREE.CanvasRenderer', THREE.REVISION ); parameters = parameters || {}; var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor( _canvasWidth / 2 ), _canvasHeightHalf = Math.floor( _canvasHeight / 2 ), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext( '2d', { alpha: parameters.alpha === true } ), _clearColor = new THREE.Color( 0x000000 ), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), // Needed for PointLight _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3(); /* TODO _canvas.mozImageSmoothingEnabled = false; _canvas.webkitImageSmoothingEnabled = false; _canvas.msImageSmoothingEnabled = false; _canvas.imageSmoothingEnabled = false; */ // dash+gap fallbacks for Firefox and everything else if ( _context.setLineDash === undefined ) { _context.setLineDash = function () {}; } this.domElement = _canvas; this.autoClear = true; this.sortObjects = true; this.sortElements = true; this.info = { render: { vertices: 0, faces: 0 } }; // WebGLRenderer compatibility this.supportsVertexTextures = function () {}; this.setFaceCulling = function () {}; // API this.getContext = function () { return _context; }; this.getContextAttributes = function () { return _context.getContextAttributes(); }; this.getPixelRatio = function () { return _pixelRatio; }; this.setPixelRatio = function ( value ) { if ( value !== undefined ) _pixelRatio = value; }; this.setSize = function ( width, height, updateStyle ) { _canvasWidth = width * _pixelRatio; _canvasHeight = height * _pixelRatio; _canvas.width = _canvasWidth; _canvas.height = _canvasHeight; _canvasWidthHalf = Math.floor( _canvasWidth / 2 ); _canvasHeightHalf = Math.floor( _canvasHeight / 2 ); if ( updateStyle !== false ) { _canvas.style.width = width + 'px'; _canvas.style.height = height + 'px'; } _clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf ); _clipBox.max.set( _canvasWidthHalf, _canvasHeightHalf ); _clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf ); _clearBox.max.set( _canvasWidthHalf, _canvasHeightHalf ); _contextGlobalAlpha = 1; _contextGlobalCompositeOperation = 0; _contextStrokeStyle = null; _contextFillStyle = null; _contextLineWidth = null; _contextLineCap = null; _contextLineJoin = null; this.setViewport( 0, 0, width, height ); }; this.setViewport = function ( x, y, width, height ) { _viewportX = x * _pixelRatio; _viewportY = y * _pixelRatio; _viewportWidth = width * _pixelRatio; _viewportHeight = height * _pixelRatio; }; this.setScissor = function () {}; this.setScissorTest = function () {}; this.setClearColor = function ( color, alpha ) { _clearColor.set( color ); _clearAlpha = alpha !== undefined ? alpha : 1; _clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf ); _clearBox.max.set( _canvasWidthHalf, _canvasHeightHalf ); }; this.setClearColorHex = function ( hex, alpha ) { console.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' ); this.setClearColor( hex, alpha ); }; this.getClearColor = function () { return _clearColor; }; this.getClearAlpha = function () { return _clearAlpha; }; this.getMaxAnisotropy = function () { return 0; }; this.clear = function () { if ( _clearBox.isEmpty() === false ) { _clearBox.intersect( _clipBox ); _clearBox.expandByScalar( 2 ); _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf; _clearBox.min.y = - _clearBox.min.y + _canvasHeightHalf; // higher y value ! _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf; _clearBox.max.y = - _clearBox.max.y + _canvasHeightHalf; // lower y value ! if ( _clearAlpha < 1 ) { _context.clearRect( _clearBox.min.x | 0, _clearBox.max.y | 0, ( _clearBox.max.x - _clearBox.min.x ) | 0, ( _clearBox.min.y - _clearBox.max.y ) | 0 ); } if ( _clearAlpha > 0 ) { setBlending( THREE.NormalBlending ); setOpacity( 1 ); setFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' ); _context.fillRect( _clearBox.min.x | 0, _clearBox.max.y | 0, ( _clearBox.max.x - _clearBox.min.x ) | 0, ( _clearBox.min.y - _clearBox.max.y ) | 0 ); } _clearBox.makeEmpty(); } }; // compatibility this.clearColor = function () {}; this.clearDepth = function () {}; this.clearStencil = function () {}; this.render = function ( scene, camera ) { if ( camera instanceof THREE.Camera === false ) { console.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' ); return; } var background = scene.background; if ( background && background.isColor ) { setFillStyle( 'rgb(' + Math.floor( background.r * 255 ) + ',' + Math.floor( background.g * 255 ) + ',' + Math.floor( background.b * 255 ) + ')' ); _context.fillRect( 0, 0, _canvasWidth, _canvasHeight ); } else if ( this.autoClear === true ) { this.clear(); } _this.info.render.vertices = 0; _this.info.render.faces = 0; _context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY ); _context.translate( _canvasWidthHalf, _canvasHeightHalf ); _renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements ); _elements = _renderData.elements; _lights = _renderData.lights; _camera = camera; _normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse ); /* DEBUG setFillStyle( 'rgba( 0, 255, 255, 0.5 )' ); _context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y ); */ calculateLights(); for ( var e = 0, el = _elements.length; e < el; e ++ ) { var element = _elements[ e ]; var material = element.material; if ( material === undefined || material.opacity === 0 ) continue; _elemBox.makeEmpty(); if ( element instanceof THREE.RenderableSprite ) { _v1 = element; _v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf; renderSprite( _v1, element, material ); } else if ( element instanceof THREE.RenderableLine ) { _v1 = element.v1; _v2 = element.v2; _v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf; _v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf; _elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen ] ); if ( _clipBox.intersectsBox( _elemBox ) === true ) { renderLine( _v1, _v2, element, material ); } } else if ( element instanceof THREE.RenderableFace ) { _v1 = element.v1; _v2 = element.v2; _v3 = element.v3; if ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue; if ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue; if ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue; _v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf; _v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf; _v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf; if ( material.overdraw > 0 ) { expand( _v1.positionScreen, _v2.positionScreen, material.overdraw ); expand( _v2.positionScreen, _v3.positionScreen, material.overdraw ); expand( _v3.positionScreen, _v1.positionScreen, material.overdraw ); } _elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ] ); if ( _clipBox.intersectsBox( _elemBox ) === true ) { renderFace3( _v1, _v2, _v3, 0, 1, 2, element, material ); } } /* DEBUG setLineWidth( 1 ); setStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' ); _context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y ); */ _clearBox.union( _elemBox ); } /* DEBUG setLineWidth( 1 ); setStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' ); _context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y ); */ _context.setTransform( 1, 0, 0, 1, 0, 0 ); }; // function calculateLights() { _ambientLight.setRGB( 0, 0, 0 ); _directionalLights.setRGB( 0, 0, 0 ); _pointLights.setRGB( 0, 0, 0 ); for ( var l = 0, ll = _lights.length; l < ll; l ++ ) { var light = _lights[ l ]; var lightColor = light.color; if ( light instanceof THREE.AmbientLight ) { _ambientLight.add( lightColor ); } else if ( light instanceof THREE.DirectionalLight ) { // for sprites _directionalLights.add( lightColor ); } else if ( light instanceof THREE.PointLight ) { // for sprites _pointLights.add( lightColor ); } } } function calculateLight( position, normal, color ) { for ( var l = 0, ll = _lights.length; l < ll; l ++ ) { var light = _lights[ l ]; _lightColor.copy( light.color ); if ( light instanceof THREE.DirectionalLight ) { var lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize(); var amount = normal.dot( lightPosition ); if ( amount"},{"title":"","date":"2021-08-21T01:21:15.139Z","updated":"2021-08-21T01:21:15.139Z","comments":true,"path":"lib/three/lib/Projector.js","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/three/lib/Projector.js","excerpt":"","text":"/** * @author mrdoob / http://mrdoob.com/ * @author supereggbert / http://www.paulbrunt.co.uk/ * @author julianwa / https://github.com/julianwa */ THREE.RenderableObject = function () { this.id = 0; this.object = null; this.z = 0; this.renderOrder = 0; }; // THREE.RenderableFace = function () { this.id = 0; this.v1 = new THREE.RenderableVertex(); this.v2 = new THREE.RenderableVertex(); this.v3 = new THREE.RenderableVertex(); this.normalModel = new THREE.Vector3(); this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ]; this.vertexNormalsLength = 0; this.color = new THREE.Color(); this.material = null; this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ]; this.z = 0; this.renderOrder = 0; }; // THREE.RenderableVertex = function () { this.position = new THREE.Vector3(); this.positionWorld = new THREE.Vector3(); this.positionScreen = new THREE.Vector4(); this.visible = true; }; THREE.RenderableVertex.prototype.copy = function ( vertex ) { this.positionWorld.copy( vertex.positionWorld ); this.positionScreen.copy( vertex.positionScreen ); }; // THREE.RenderableLine = function () { this.id = 0; this.v1 = new THREE.RenderableVertex(); this.v2 = new THREE.RenderableVertex(); this.vertexColors = [ new THREE.Color(), new THREE.Color() ]; this.material = null; this.z = 0; this.renderOrder = 0; }; // THREE.RenderableSprite = function () { this.id = 0; this.object = null; this.x = 0; this.y = 0; this.z = 0; this.rotation = 0; this.scale = new THREE.Vector2(); this.material = null; this.renderOrder = 0; }; // THREE.Projector = function () { var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = { objects: [], lights: [], elements: [] }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ), _boundingBox = new THREE.Box3(), _points3 = new Array( 3 ), _points4 = new Array( 4 ), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4(); // this.projectVector = function ( vector, camera ) { console.warn( 'THREE.Projector: .projectVector() is now vector.project().' ); vector.project( camera ); }; this.unprojectVector = function ( vector, camera ) { console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' ); vector.unproject( camera ); }; this.pickingRay = function ( vector, camera ) { console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' ); }; // var RenderList = function () { var normals = []; var uvs = []; var object = null; var material = null; var normalMatrix = new THREE.Matrix3(); function setObject( value ) { object = value; material = object.material; normalMatrix.getNormalMatrix( object.matrixWorld ); normals.length = 0; uvs.length = 0; } function projectVertex( vertex ) { var position = vertex.position; var positionWorld = vertex.positionWorld; var positionScreen = vertex.positionScreen; positionWorld.copy( position ).applyMatrix4( _modelMatrix ); positionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix ); var invW = 1 / positionScreen.w; positionScreen.x *= invW; positionScreen.y *= invW; positionScreen.z *= invW; vertex.visible = positionScreen.x >= - 1 && positionScreen.x = - 1 && positionScreen.y = - 1 && positionScreen.z"},{"title":"","date":"2021-08-21T01:23:28.500Z","updated":"2021-08-21T01:21:15.142Z","comments":true,"path":"lib/three/three.min.js","permalink":"https://ztlpluz.github.io/Opynicus.github.io/lib/three/three.min.js","excerpt":"","text":"// threejs.org/license (function(l,pa){\"object\"===typeof exports&&\"undefined\"!==typeof module?pa(exports):\"function\"===typeof define&&define.amd?define([\"exports\"],pa):pa(l.THREE=l.THREE||{})})(this,function(l){function pa(){}function D(a,b){this.x=a||0;this.y=b||0}function ea(a,b,c,d,e,f,g,h,m,k){Object.defineProperty(this,\"id\",{value:Ze++});this.uuid=N.generateUUID();this.name=\"\";this.image=void 0!==a?a:ea.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=void 0!==b?b:ea.DEFAULT_MAPPING;this.wrapS=void 0!==c?c:1001;this.wrapT= void 0!==d?d:1001;this.magFilter=void 0!==e?e:1006;this.minFilter=void 0!==f?f:1008;this.anisotropy=void 0!==m?m:1;this.format=void 0!==g?g:1023;this.type=void 0!==h?h:1009;this.offset=new D(0,0);this.repeat=new D(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this.encoding=void 0!==k?k:3E3;this.version=0;this.onUpdate=null}function fa(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1}function Ya(a,b,c){this.uuid=N.generateUUID();this.width= a;this.height=b;this.scissor=new fa(0,0,a,b);this.scissorTest=!1;this.viewport=new fa(0,0,a,b);c=c||{};void 0===c.minFilter&&(c.minFilter=1006);this.texture=new ea(void 0,void 0,c.wrapS,c.wrapT,c.magFilter,c.minFilter,c.format,c.type,c.anisotropy,c.encoding);this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.depthTexture=void 0!==c.depthTexture?c.depthTexture:null}function Gb(a,b,c){Ya.call(this,a,b,c);this.activeMipMapLevel= this.activeCubeFace=0}function ca(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._w=void 0!==d?d:1}function q(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0}function S(){this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);0= d||0"}],"posts":[{"title":"有用的提升生产力的工具","slug":"tool-menu","date":"2022-05-16T03:29:33.000Z","updated":"2022-05-17T00:38:13.722Z","comments":true,"path":"2022/05/16/tool-menu/","link":"","permalink":"https://ztlpluz.github.io/Opynicus.github.io/2022/05/16/tool-menu/","excerpt":"&nbsp;","text":"&nbsp; 画图工具excalidraw：好用的在线画图网站，适合在展示场合画概念图。 drawio：用来画流程图或是软工中的类图来说是很合适的，类似的ProcessOn也不错，不过可惜的是容量有限制 代码粘贴HighLightCode：非常适合在word中粘贴带语法高亮的代码 carbon：将代码转化为图片。 CodeToImg：与上面那个一样，不过是mac风格。 Latex在线编辑overleaf：如同其字面意思，不过就是在线编译这一点速度不会太快。。。 汇编？v86：x86在线模拟 Compiler Explorer：在线将高级语言转换为汇编语言显示汇编代码 Markdown编辑器MarkText：开源的好用的md编辑器 笔记Trilium：支持本地也支持服务器，笔记的层级很明确，而且懂得自定义的应该能玩出花来。 记录工作时间Wakatime：可以记录很多详细信息，花了多久在某个操作系统或某个语言或某个项目上，在JetBrains家的IDE与vscode都有wakatime的插件，可以说是记录信息很方便了。","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"效率","slug":"效率","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E6%95%88%E7%8E%87/"}]},{"title":"2021年终总结","slug":"summary-of-2021","date":"2022-01-31T02:16:27.000Z","updated":"2022-05-27T01:15:55.517Z","comments":true,"path":"2022/01/31/summary-of-2021/","link":"","permalink":"https://ztlpluz.github.io/Opynicus.github.io/2022/01/31/summary-of-2021/","excerpt":"​ 这是一篇小学生行文水平的年终总结（。","text":"​ 这是一篇小学生行文水平的年终总结（。 前言​ 说实话这是我第一次写年终总结，今天对我来说是特殊的一年，在中国新年前的最后一天里，我想好好谈谈这一年的路程，你可以看作是各种“大三上第x周”的精简版+后日谈dlc+前传dlc，这次我不打算加密了，这一次，我希望坦诚一些。 正文​ 2021年结束了——不对，2021早就结束了，2022年也实际上早就到来了，虽说对于中国新年来说今天是2021的最后一天，不过感觉也还是有必要写写年终总结与新年展望了。 ​ 2021是梦醒的一年。无论愿意与否，我都接受了现状——我保研基本无望，给我的路只剩下了考研与就业，说实在的，也许我多少心里是有数的，只是说我不愿接受罢，最终的结果我不得不接受。 ​ 2021是反思的一年。对于结果，也许嘴上天天摆烂，但心里却始终有些放不下，为大二荒废的一年而后悔，陷入了不断内耗的境地。 ​ 2021年是迷茫的一年。或许是因为失利，我终于开始或多或少留心起身边的事情，我到底要做什么呢？似乎我急需做些什么东西来证明自己似的，但大二的荒废让我发觉自己错过了太多，甚至不知从何开始。那时的我莫名想整个博客，也是从那时起我接触了github。 ​ 2021是探索的一年。当一个人完全不了解博客的运行机制，甚至对前端的内容没有丝毫了解时，他说要做个私人博客，说实话挺怪的，我傻傻地在知乎搜索“怎么制作私人博客”之类的问题，最后我找到了一个较为完整的技术解决方案，从装环境到自定义的流程都有了，那还等什么呢？照着开始罢。 ​ 2021是学会获取信息的一年。看着方案，“首先下载node.js”，那是什么？我这样问自己，“我们将使用hexo框架，使用其最受欢迎的主题NexT”，我也只能照猫画虎地做，因为我当时真的对这些不懂，当然这也导致了博客的二级域名为什么会如此怪异。在过程中我找了很多建站的过程，然后我才发现原来很多人不只会把解决方案写在csdn，也会有不少人把解决方案写在博客之中，有很多文章对于建站的流程都差不多是手把手教了，最终当我敲下hexo clean,hexo g,hexo d后，我看到了与官网模板一样的结果，不过问题是我的博客是建立在二级域名上的，这也为后来的事做了铺垫罢。然后就是做各种自定义了，当时候就像个拿到了新玩具的孩子，什么花里胡哨的都想加（虽说现在好像也差不多），最终我修改出了一个自认为满意的结果。 ​ 2021是孤独的一年。当我的博客已经正常运作，我能拿它来做什么？对于大多数折腾了自己博客的人来说，基本都是分享技术文章罢，不过我的水平能分享出什么技术文章呢？懂了github pages相关内容后，然后我看到了高中同学的博客，他选择了按周来记录每个学期/学年，写的内容也基本上是当天做了什么，顺带说点感想什么的，这给了我想法，记录记录开学后的生活怎么样？后来我也是这么做的，但是感觉我每天都像是在吐苦水或是心里话太多，感觉有些不太适合让人看到，然后开始给博客内容加密，但这样大多数人是基本看不见的，外人只能看见一个标题，点击进入要输密码，那这东西写了给谁看？只能给我自己看，但如果写的东西只给自己看，那有什么必要放到页面上呢？这问题我现在都没想清，或许就是因为太孤独了罢。我逐渐开始晚上看起皮套人，皮套人的乐子永远是很多的，说来惭愧，我第一个看的皮套人还是辣辣米呢，现在我巴不得她毕业（。 ​ 2021年是自勉的一年。或许是博客让我意识到每天能够作为一个好的参考，如果我能把每日都记录下来，那么一学期下来我是否能追溯出我的变化及其原因？对于即将到来的开学，我给自己定了要求，说实话那是我大学以来第一次好好审视我自己，我没有回避自己的弱点并提出了对应的要求，我想着，下个学期，我一定要做些什么东西出来。 ​ 2021年是早出晚归的一年。这是我给自己提的要求，我不想再像大二那样烂在宿舍里，事实是我确实做到了，虽说显得有些像自我赎罪式的，但是很有效。我开始做到每天去图书馆，图书馆真是个好地方，戴上耳机基本上就没有了喧嚣，偶尔写写408，偶尔逛逛github的日子让我很快乐，一开始我还给自己限定了每周六晚上才能游戏，结果是过了三周我都忘了周六该玩的，那时我才开始明白，原来游戏对我来说也只有那么重要。那时候我也给自己找了些事做，学学html,css,js。最终算是入了门，那时我也想学学C#，还买了本书，最后倒是鸽了。 ​ 2021是开拓眼界的一年。有一天我看到了一个up做的个人引导页的视频，正好我刚学了学前端三剑客，那我为何不也试试写个个人引导页？真写起来发现也是有很多具体的问题，也是在这个过程中，学会了git功能的使用，学会使用github是我这一年意义重大的事。从前我只会在github上搜索然后Download zip，当我真正进入并对github社群有所了解后，我深刻感到自己的渺小，世界上优秀的人很多，但往常我只是有这个概念，直到这些人的代码摆在我面前，我才如此清晰地感受到人外有人，天外有天。最终我完成了个人引导页，并加上了域名opynicus.com，博客也从此成为了其下的二级域名，我想从今往后，opynicus这个网名对我来说将是意味深长的。 ​ 2021是迷失的一年，opynicus.com的诞生仿佛让我尝到了甜头，我开始学vue，打算学完后重置站点，vue的3.0与2.0的差别着实有点大，在走了不少弯路后我明白了一个道理，那就是最好的教程是官方文档。vue学着学着发现要重写站点估计得大改，我没法给自己分配那么多时间，遂搁置了同时开始对前端与后端的交互流程感到好奇，想做个实例出来看看，这期间我也总是在想着想要做些什么，但是有种找不到目标的感觉，个人引导页也只是收到了启发的结果，最后我只算是通过自己动手做出了个简单的前后端数据库的实例后就什么也没做成。就在不断纠结应该做什么的过程中，我的重心又回到了课程上，vue的学习也逐渐搁置。 ​ 2021是脚踏实地的一年。就这样过了几周，学习与做题的生活一成不变时，我选的一门课开了，内容大致是人工智能从技术栈层面自顶向下的学习，注重coding，虽说放了不少水。但这门课说注重实操，我决定好好学。对于一个初次接触numpy与tensorflow的人来说，各种矩阵变换操作可以说是很吃力的，虽说有些内容不能算是自己绝对独立完成的，但基本上都做到了通读，一个个lab从早看到晚，一天就这么过去了。我开始试着把实验的相关代码传到github上，顺带看着班上某大佬也上传了代码，一看进度，不得不承认大佬就是大佬，顺带暗骂一句自己的水平，继续去debug了。也是通过观察这位大佬的github，我也发现老老实实看书做lab，做课设不也是做东西么。这位大佬在博客中提到推荐各位去看一下CSAPP，对他而言是如同开了眼界的存在。我也早听说过这些黑书的大名，不过大多都是买了不看的，但这次感觉不一样了，我太需要这种开眼界的感觉了，或许是时候看看书了，说实话，这还是我第一次啃一本专业类的大部头书籍并坚持啃完了的，最后的感受倒是没有那么深。书是一本好书，可能是我期望过高或是有不少内容已经学过一些，我只能感慨自已没有在大二读这本书真的很遗憾。 ​ 2021是认清自我的一年。这才是最重要的。不玩游戏给了我很多时间来思考自身，我也在这个过程中逐渐了解自己，其实我的现状都是有一定的原因的，理解并接受自己的模样，是我这一年的最有意义的事情。我认识到了自己的大二的荒芜，也意识到了有着各种缺点的自己，虽然我也不知道怎么改。知道了自己想做什么本质还是虚荣心的体现，明白自己过于内耗并从中走出……每隔一个月我看自己都觉得像个傻逼，不过我终于能相比以往更放平心态接受一切，我的环境、我与亲人的关系、与同学的交流、我的成绩、我的思想、我的理想……生活有苦涩，但也没必要因此大呼小叫以博得他人同情，人们都不是傻子，真正的困难大家心理都明白，学会更快速地接受现状与吞咽悲伤也算是一种收获罢。 ​ 2022年，旧的Opynicus死了，新的Opynicus要来了。 ​ 下一年的Opynicus应该要专注于考研了，为什么要考研，我已经找到了自己的理由，不只是人云亦云，大家都考我也要考那么简单，当然在这里就不多说了。 ​ 也希望能更有些自己的主见，虽说参照别人的经历不是坏事，但Opynicus就是Opynicus，希望能有更多的自己的独特经历罢。有些人能找准大方向，目标明确，有些人则随波逐流，而这一年也是Opynicus在这两种情况下不上不下的一年，这也算是内耗的根源罢，所以也希望来年能更踏实些，脚踏实地对Opynicus来说是一项长期的目标。 ​ 还有不要被短暂的廉价的成就感冲昏头脑，做一个谦虚谨慎的人；不要做一个太好说话的人……已经说了很多了，但是感觉想说的也只说了2/3一样，了解与认识自己可真是条长路啊。 ​ 最后我也不想说什么太长的结尾词，2022，继续行在路上罢。","categories":[{"name":"自言自语","slug":"自言自语","permalink":"https://ztlpluz.github.io/Opynicus.github.io/categories/%E8%87%AA%E8%A8%80%E8%87%AA%E8%AF%AD/"}],"tags":[{"name":"日常","slug":"日常","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E6%97%A5%E5%B8%B8/"},{"name":"总结","slug":"总结","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E6%80%BB%E7%BB%93/"}]},{"title":"CSAPP之datalab","slug":"CSAPP-datalab","date":"2022-01-25T03:04:43.000Z","updated":"2022-01-26T05:30:56.628Z","comments":true,"path":"2022/01/25/CSAPP-datalab/","link":"","permalink":"https://ztlpluz.github.io/Opynicus.github.io/2022/01/25/CSAPP-datalab/","excerpt":"称得上是典中典了的CSAPP的datalab，个人记录。","text":"称得上是典中典了的CSAPP的datalab，个人记录。 前言​ 由于CSAPP的大名可以说是无人不知，无人不晓（，那么这篇文章算是个人一些零碎的总结罢，较难的部分也有参考别人的，并且也觉得有必要对位运算什么的做个总结，位运算还挺抽象的，有些地方会有体现。 正文 bitXor 只使用～与＆运算，运算符不能超过14个 逻辑运算挺基础的，这里算是复习了下离散或是数字逻辑的逻辑运算符含义，异或的具体式子如下$$x \\oplus y = (x \\land \\neg y) \\lor (\\neg x \\land y)$$所以代码如下 12345678910/* * bitXor - x^y using only ~ and &amp; * Example: bitXor(4, 5) = 1 * Legal ops: ~ &amp; * Max ops: 14 * Rating: 1 */int bitXor(int x, int y) &#123; return ~((~(~x &amp; y)) &amp; (~(x &amp; ~y)));&#125; tmin 返回32位最小补码整数 这玩意就是0x80000000。。。但是禁用8bits的常数，所以就可以对1&lt;&lt;31做移位运算获得我们要的结果。 123456789/* * tmin - return minimum two&#x27;s complement integer * Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; * Max ops: 4 * Rating: 1 */int tmin(void) &#123; return 1 &lt;&lt; 31;&#125; isTmax 如果x是32位最大补码整数返回1，否则返回0 32位最大补码整数是0x7FFFFFFF，也就是最高位为0其余位为1，但怎么用作判断来返回一个bool值呢？这里就有些没想明白，我想的是通过各种位移与或运算弄出一个0x7FFFFFFF的变量，然后做异或判断后返回，但这么做肯定超出了符号数量要求的限制。然后题解看一半知道了一个简单的方法，最大补码整数+1后肯定是最高位为1其余位为0，那么这时候做与运算就会是0，但到这一步还不够，还有个0xFFFFFFFF(-1)的特殊情况没有考虑，需要单独剔除，至此，对应的运算操作才算完全。 123456789101112/* * isTmax - returns 1 if x is the maximum, two&#x27;s complement number, * and 0 otherwise * Legal ops: ! ~ &amp; ^ | + * Max ops: 10 * Rating: 1 */int isTmax(int x) &#123; int m = !(~((x + 1) ^ x)); int n = !!(x+1); return m &amp; n; &#125; allOddBits 若奇数位全为1返回1，否则返回0 奇数位全为1则对应结果是0xAAAAAAAA，与这个数做与运算后异或运算即可。 12345678910111213/* * allOddBits - return 1 if all odd-numbered bits in word set to 1 * where bits are numbered from 0 (least significant) to 31 (most significant) * Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1 * Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; * Max ops: 12 * Rating: 2 */int allOddBits(int x) &#123; int tmp = 0xAA | 0xAA&lt;&lt;8 int mask = tmp | tmp&lt;&lt;16 return !((x &amp; mask) ^ mask);&#125; negate 返回-x 补码取反运算没啥可说，记得+1。 12345678910/* * negate - return -x * Example: negate(1) = -1. * Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; * Max ops: 5 * Rating: 2 */int negate(int x) &#123; return ~x + 1;&#125; isAsciiDigit 若0x30 &lt;= x &lt;= 0x39返回1，否则返回0，即是否为’0’~’9’ 0x30~0x37的高5位均为00110，所以我们通过先右移三位将高5位移到低5位做与运算来判断，对于0x38与0x39进行单独判断。 123456789101112131415/* * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;) * Example: isAsciiDigit(0x35) = 1. * isAsciiDigit(0x3a) = 0. * isAsciiDigit(0x05) = 0. * Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; * Max ops: 15 * Rating: 3 */int isAsciiDigit(int x) &#123; int a = !((x &gt;&gt; 3) ^ 0x06); int b = !(x ^ 0x38); int c = !(x ^ 0x39); return a | b | c;&#125; conditional 三元运算 x ? y : z 条件判断让人想到逻辑关系p-&gt;q，而p-&gt;q可按照如下式子转化$$p \\rightarrow q \\Longleftrightarrow \\neg p \\lor q$$然后下一步是卡壳了的，怎么将x条件转化为一个能得出结果的bool类型，if与else部分之间肯定是使用的或关系，那么x能生成的mask该是什么样，然后逐渐了解到0xFFFFFFFF与0x00000000正好对应，且0xFFFFFFFF &amp; y = y，if部分可以通过这种方式使得算出来保留结果，x为0，那么让else部分0xFFFFFFFF &amp; z = z。通过两次!运算，将一个int型转换成伪bool型 1234567891011/* * conditional - same as x ? y : z * Example: conditional(2,4,5) = 4 * Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; * Max ops: 16 * Rating: 3 */int conditional(int x, int y, int z) &#123; int mask = ((!!x) + ~1) + 1; return ((mask &amp; y) | (~mask &amp; z)) ;&#125; isLessOrEqual 如果x &lt;= y，则返回1，否则返回0 书中讲过小于的实现是将 x &lt; y 转化为 y - x &gt; 0 实现的，那么对于小于等于是否也是类似方法。但是这里要考虑到符号位的情况，但是当y与x异号时做减运算有可能产生溢出，所以我们先对符号位做判断，然后补码减法运算基本上是通过转化成补码加法的方式。 12345678910111213int isLessOrEqual(int x, int y) &#123; int a = ( x &gt;&gt; 31 ) &amp; 0x1; int b = ( y &gt;&gt; 31 ) &amp; 0x1; int c = a ^ b;//判断符号位同号异号 int d = c &amp; a; int ll = ~(1 &lt;&lt; 31) ; int m = x &amp; ll; int n = y &amp; ll; int k = m + ~n + 1;//减法转加法 int s = ( k &gt;&gt; 31 ) &amp; 0x1; int ans = !!k &amp; !s ; return d | ( !c &amp; !ans ) ; &#125; logicalNeg 实现!运算符操作，当然不能用！。。。 对于0来说，只有它能出1的结果，对于补码运算来说，0是唯一的，不存在+0或-0，非0数的补码符号位肯定异号，而0则同号，故通过这一点来判断。 123456789101112131415/* * logicalNeg - implement the ! operator, using all of * the legal operators except ! * Examples: logicalNeg(3) = 0, logicalNeg(0) = 1 * Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt; * Max ops: 12 * Rating: 4 */int logicalNeg(int x) &#123; int a = x &gt;&gt; 31; int b = (~x + 1) &gt;&gt; 31; int c = a | b;//非0数结果为0xFFFFFFFF int d = c + 1; return d &amp; 0x1;&#125; howManyBits 返回表达32位补码整数最小所需的位数 从这里开始跟不上思路，开始“求援”，然后发现这玩意确实是很麻烦，我找到的解法如下，仔细一看，这玩意是二分查找，具体的解释我也没什么可说，都写在了注释里。 12345678910111213141516171819202122232425262728293031323334353637/* howManyBits - return the minimum number of bits required to represent x in * two&#x27;s complement * Examples: howManyBits(12) = 5 * howManyBits(298) = 10 * howManyBits(-5) = 4 * howManyBits(0) = 1 * howManyBits(-1) = 1 * howManyBits(0x80000000) = 32 * Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt; * Max ops: 90 * Rating: 4 */int howManyBits(int x) &#123; int b16,b8,b4,b2,b1,b0; int mask = x &gt;&gt; 31; x = (mask &amp; ~x) | (~mask &amp; x); //如果为正数，保持不变；如果为负数，按位取反 //step1:判断高16为是否有1 b16 = !!(x &gt;&gt; 16) &lt;&lt; 4; //如果高16为有1,则b16 = 16，否则为0 x &gt;&gt;= b16; //如果高16为有1,x右移16位舍弃低16位,在新的低16位继续查找；否则保持不变 //step2:判断高8位是否有1 b8 = !!(x &gt;&gt; 8) &lt;&lt; 3; x &gt;&gt;= b8; //step3:高4位 b4 = !!(x &gt;&gt; 4) &lt;&lt; 2; x &gt;&gt;= b4; //step4:高2位 b2 = !!(x &gt;&gt; 2) &lt;&lt; 1; x &gt;&gt;= b2; //step5:高1位 b1 = !!(x &gt;&gt; 1); x &gt;&gt;= b1; //step6:低1位 b0 = x; return b16 + b8 + b4 + b2 + b1 + b0 + 1;&#125; floatScale2 返回2f的位表示 到了ieee浮点数部分，浮点数的表示方式与整数差别很大。exp为0时，通过uf左移一位完成运算。exp为255则为本身，Inf和NaN都返回本身，因此exp全为1时直接返回，同样，如果乘2后exp全为1时，返回Inf。 123456789101112131415161718192021222324252627282930/* * floatScale2 - Return bit-level equivalent of expression 2*f for * floating point argument f. * Both the argument and result are passed as unsigned int&#x27;s, but * they are to be interpreted as the bit-level representation of * single-precision floating point values. * When argument is NaN, return argument * Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while * Max ops: 30 * Rating: 4 */unsigned floatScale2(unsigned uf) &#123; unsigned sign = (uf &gt;&gt; 31) &amp; 0x1; unsigned exp = (uf &gt;&gt; 23) &amp; 0xFF; unsigned frac = uf &amp; (1&lt;&lt;31 - 1); unsigned res; if (exp == 0) &#123; frac &lt;&lt;= 1; res = (sign &lt;&lt; 31) | (exp &lt;&lt; 23) | frac; &#125; else if (exp == 0xFF) return uf; else &#123; exp++; res = (sign &lt;&lt; 31) | (exp &lt;&lt; 23) | frac; &#125; return res;&#125; floatFloat2Int 将浮点数转换为整数 分三种情况考虑，非规格的数，转化为int后为0，特殊值时返回0x80000000u，规格数超过int范围也返回0x80000000u，否则就转换 12345678910111213141516171819202122232425262728293031323334353637383940414243/* * floatFloat2Int - Return bit-level equivalent of expression (int) f * for floating point argument f. * Argument is passed as unsigned int, but * it is to be interpreted as the bit-level representation of a * single-precision floating point value. * Anything out of range (including NaN and infinity) should return * 0x80000000u. * Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while * Max ops: 30 * Rating: 4 */int floatFloat2Int(unsigned uf) &#123; int sign = (uf &gt;&gt; 31) &amp; 1; int exp = (uf &gt;&gt; 23) &amp; 0xff; int frac = uf &amp; 0x7fffff; int E = exp - 127; if (E &lt; 0)//小数 &#123; return 0; &#125; else if (E &gt;= 31)//超出范围 &#123; return 0x80000000u; &#125; else &#123; frac = frac | (1 &lt;&lt; 23); if (E &lt; 23)//是否舍去小数 &#123; frac &gt;&gt;= (23 - E); &#125; else &#123; frac &lt;&lt;= (E - 23); &#125; if (sign) return -frac; else return frac; &#125;&#125; floatPower2 返回2.0^x ​ 浮点数求值公式为$$v = (-1)^s \\times M \\times 2 ^ E = 2 ^ x$$​ 2.0的位级表示是公式$$1.0 \\times 2^1$$​ 符号位是0，指数为1 + 127 = 128，rac = 1.0 - 1 = 0。 123456789101112131415161718/* * floatPower2 - Return bit-level equivalent of the expression 2.0^x * (2.0 raised to the power x) for any 32-bit integer x. * * The unsigned value that is returned should have the identical bit * representation as the single-precision floating-point number 2.0^x. * If the result is too small to be represented as a denorm, return * 0. If too large, return +INF. * * Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while * Max ops: 30 * Rating: 4 */unsigned floatPower2(int x) &#123; if(exp &lt; -126) return 0; if(exp &gt; 127) return (0xff &lt;&lt; 23); return exp &lt;&lt; 23;&#125; 总结​ datalab的难度实际上是从前往后逐步上升的，说真的到后面还挺吃力的，尤其是浮点数，这玩意可不像整数那么直观，浮点数你就是个**，不过好在可以ifelse，还有二分查找那些，说真的我是没想到的，总的来说，还是对位运算有了更深一步的认识罢。","categories":[{"name":"三言两语","slug":"三言两语","permalink":"https://ztlpluz.github.io/Opynicus.github.io/categories/%E4%B8%89%E8%A8%80%E4%B8%A4%E8%AF%AD/"}],"tags":[{"name":"C","slug":"C","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/C/"},{"name":"CSAPP","slug":"CSAPP","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/CSAPP/"}]},{"title":"关于我用上了dnSpy后开始修改unity游戏这件事","slug":"dnSpy","date":"2022-01-17T13:41:11.000Z","updated":"2022-01-25T03:33:07.189Z","comments":true,"path":"2022/01/17/dnSpy/","link":"","permalink":"https://ztlpluz.github.io/Opynicus.github.io/2022/01/17/dnSpy/","excerpt":"什么叫对unity宝具啊","text":"什么叫对unity宝具啊 前言​ 最近在玩一款国产游戏，应该是湾湾那边的？《餐瘾地城》，不过恕我直言这玩意可真是个kusogame，等到后面后悔时算是已经来不及了，虽然如此我也是磕磕碰碰打完了这一kusogame，但看着成就列表，什么一命通关……算了，本来我是不打算打全成就了，但是我接触到了dnSpy这个玩意，然后这又是个unity游戏，好的，那么今天就拿这款kusogame来开刀。 dnSpy是什么​ dnSpy 是一款针对 .NET 程序的逆向工程工具。该项目包含了反编译器，调试器和汇编编辑器等功能组件，而且可以通过自己编写扩展插件的形式轻松实现扩展。该项目使用 dnlib读取和写入程序集，以便处理有混淆代码的程序（比如恶意程序）而不会崩溃。 ​ 下载地址 过程​ 1，打开对应游戏的文件夹，一般来说unity文件夹下会有两个文件夹，其中一个是xxx_Data的命名形式，我们打开这一目录下的Managed文件夹，可以看见许多dll文件。玩过Unity的都知道，基本游戏使用的C#脚本都被编译到了Assembly-CSharp.dll，因为本游戏没有进行其他加密，只有个unity自带的Momo，所以我们可以直接使用dnSpy进行反编译，找到下图的文件夹下的Assembly-CSharp.dll文件，使用dnSpy进行打开，如图。 ​ 2，我们的目标是成就的修改，左边列出了很多游戏中出现的类(class)，看起来很不好下手，实际上我们可以点击上方的搜索按钮，并进行搜索，成就大多数时候应该都会写作achievement吧，否则那就更是kusogame了 ​ 3，经过一些筛查，我们在namespace TRNTH.DungeonMeal.Store下找到了一组枚举数据类型，一般来说，这就是我们要找的内容了，大多数游戏成就都是以枚举类型所表示的，具体代码如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768using System;namespace TRNTH.DungeonMeal.Store&#123; // Token: 0x02000985 RID: 2437 public enum Achievement &#123; // Token: 0x0400249B RID: 9371 ACHIEVEMENT_Tutored, // Token: 0x0400249C RID: 9372 ACHIEVEMENT_Chapter_1, // Token: 0x0400249D RID: 9373 ACHIEVEMENT_Chp1Food, // Token: 0x0400249E RID: 9374 ACHIEVEMENT_Chp1Weapon, // Token: 0x0400249F RID: 9375 ACHIEVEMENT_VineGolum, // Token: 0x040024A0 RID: 9376 ACHIEVEMENT_WangCai, // Token: 0x040024A1 RID: 9377 ACHIEVEMENT_Lord_of_Forest, // Token: 0x040024A2 RID: 9378 ACHIEVEMENT_ExpMax, // Token: 0x040024A3 RID: 9379 ACHIEVEMENT_EvilNeverDie, // Token: 0x040024A4 RID: 9380 ACHIEVEMENT_FirstCooking, // Token: 0x040024A5 RID: 9381 ACHIEVEMENT_Guava, // Token: 0x040024A6 RID: 9382 ACHIEVEMENT_Surface, // Token: 0x040024A7 RID: 9383 ACHIEVEMENT_Diffculty1, // Token: 0x040024A8 RID: 9384 ACHIEVEMENT_Diffculty2, // Token: 0x040024A9 RID: 9385 ACHIEVEMENT_Diffculty3, // Token: 0x040024AA RID: 9386 ACHIEVEMENT_Chp2Food, // Token: 0x040024AB RID: 9387 ACHIEVEMENT_Chp2Weapon, // Token: 0x040024AC RID: 9388 ACHIEVEMENT_SaveGrill, // Token: 0x040024AD RID: 9389 ACHIEVEMENT_Chapter_2, // Token: 0x040024AE RID: 9390 ACHIEVEMENT_MeatTurret, // Token: 0x040024AF RID: 9391 ACHIEVEMENT_PlantBoss, // Token: 0x040024B0 RID: 9392 ACHIEVEMENT_Nickle, // Token: 0x040024B1 RID: 9393 ACHIEVEMENT_Simmer, // Token: 0x040024B2 RID: 9394 ACHIEVEMENT_Putrid_Is_Watching, // Token: 0x040024B3 RID: 9395 ACHIEVEMENT_GoodChef, // Token: 0x040024B4 RID: 9396 NEW_ACHIEVEMENT_CookLevelUp, // Token: 0x040024B5 RID: 9397 NEW_ACHIEVEMENT_GOFaster, // Token: 0x040024B6 RID: 9398 NEW_ACHIEVEMENT_Putrid_Revived, // Token: 0x040024B7 RID: 9399 NEW_ACHIEVEMENT_CookChpt01LevelUp &#125;&#125; ​ 4，那么接下来要做的就是我们要找到一处能够获得成就的操作处，然后编写同样的代码重新编译就行，我们搜索achievements的同时会发现有些函数名为GainAchievement，于是我们进入寻找，最终我们会发现获得成就的代码是这种格式 1AchievementManager.GainAchievement(TRNTH.DungeonMeal.Store.Achievement.xxxxxxxxxx); ​ 5，知道以后，我们就可以修改了，例如我们正巧发现了QuickTeleportTo类，将代码加入构造函数中，那么我们是否会启动游戏就能跳成就？我们不妨一试。以下是部分代码 我们直接在构造函数上修改，在代码部分右键，“编辑类”，然后开始修改代码，添加对应的namespace:TRNTH.DungeonMeal.Store，然后加上第4步格式的代码于构造函数中，xxxxx修改为第3步列出的枚举类型。 然后点击编译即可 ​ 6，然后点击“文件”-&gt;“全部保存”，点“确定”后退出，然后我们进入游戏 ​ 7，果然一进入游戏就跳了成就，来不及弄gif展示，不过确实做到了。 Fin​ 对于一些游戏，应该还会有更具体的修改什么的，例如可以让《空洞骑士》做到一击必杀？我觉得很有可能，不过也不打算去试验了，在这只是用一个简单的修改实例介绍了下dnSpy这个工具是怎么用的，不过，dnSpy的更多用法可以说我都没发掘出来。总之，反编译能做的事很多，修改游戏只是其冰山一角。","categories":[{"name":"三言两语","slug":"三言两语","permalink":"https://ztlpluz.github.io/Opynicus.github.io/categories/%E4%B8%89%E8%A8%80%E4%B8%A4%E8%AF%AD/"}],"tags":[{"name":"游戏","slug":"游戏","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E6%B8%B8%E6%88%8F/"},{"name":"反编译","slug":"反编译","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"},{"name":"C#","slug":"C","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/C/"},{"name":"Unity","slug":"Unity","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/Unity/"}]},{"title":"关于CE的简单使用","slug":"CE-tutorial","date":"2022-01-07T13:26:41.000Z","updated":"2022-01-25T03:27:46.244Z","comments":true,"path":"2022/01/07/CE-tutorial/","link":"","permalink":"https://ztlpluz.github.io/Opynicus.github.io/2022/01/07/CE-tutorial/","excerpt":"关于Cheat Engine为什么是修改器之神，首先……","text":"关于Cheat Engine为什么是修改器之神，首先…… 前言​ 众所周知，CE(Cheat Engine)是一个开放源代码的作弊软件，可以说算是最优秀的修改器工具了，最近闲来无事在玩某单机游戏时被打到心态爆炸，突然想到了CE这个工具——风灵月影是不会那么有指向性的，基本上是说什么就做什么，那么有些问题不如自己解决，比如单机游戏中痛苦的刷钱与刷经验什么的，甚至包括打不过锁血什么的——不过我承认锁血什么的确实会丧失很大一部分乐趣，会无法感受到开发者为他们准备的很多东西，更重要的是没有成就感，在我看来，这是最要命的。 ​ 好了，那么我们直接开始说说关于CE的简单使用，对于部分游戏，它的数据是动态的，可以说是防作弊了罢？部分游戏会有多级指针什么的搞得人头晕，也有的游戏数据是以浮点数形式保存的，稍微麻烦些，但是今天拿来当例子的游戏基本上没这些问题——毕竟是tutorial，没必要也不想整得那么麻烦，可以说是一个CE的简单总结使用罢。 ​ 这个被拿来当例子的幸运游戏是《Hollow Knight》，中文名《空洞骑士》。这是个近年来非常不错的银河恶魔城游戏，有优秀的地图与关卡设计，好的音乐与低配要求也使得它成了一部更受众的佳作。但是，它也是有些让我感到头疼的点的，比如一些在我看来很难的boss战，还有各种需要钱的时候凑不齐的窘境——游戏的钱类似黑魂，死两次就没有，全收集的路上少不了钱，更何况还有三个易碎护符要变成坚固护符可得花不少钱，在这种游戏中刷钱可谓是及其痛苦的事情，所以不演了，今天就拿空洞骑士来做例子，那么先从刷钱开始。 流程​ 1，我们来拿这个已经全收集了的存档来做例子 ​ ​ 2，然后打开CE，接着打开空洞骑士的进程 ​ ​ 3，首先可以看到钱数是22823，一般来说，win程序的数据以4字节数来存储，于是我们在框中输入22823，并点击“新的扫描”按钮，结果如图所示 ​ ​ ​ 4，我们可以看到与这个数字有关的就只有18个结果，那么接下来我们要做的就是进一步缩小范围，找到真正对应钱的内存位置并操作。我们先去尝试打一个怪，捡钱，钱数变成了22846。 ​ ​ 我们把22846再次键入输入区，点击“再次扫描”，然后发现只有两个地址了，Yes.再来一次，数量变22859，地址还是这两个，嗯，那就对这两个地址分析。 ​ ​ 5，我们对地址右键，点击选项“找出是什么改写了这个地址”，再刷一次钱，那个弹出的空白框就会出现一条汇编指令，我们点开详细信息可以看到对应的汇编指令mov [rdi+000001C4], eax，学过汇编的同学应该会更有印象的。 ​ ​ 6，到这一步我们就可以修改了，我们点击”显示反汇编程序“按钮，会弹出如图示界面 ​ ​ 此时我们点击“工具”-&gt;”自动汇编”，接着在弹出的界面点击“模板”-&gt;“代码注入”，产生如图所示的代码块 ​ 把你需要添加的代码加在newmem下，当然你也可以把originalcode下的内容去掉自己新写一个，这里我们假设要20000的钱好了，十进制的20000在十六进制下是4E20H，所以说我们可以如下添加代码，点击执行 ​ ​ 7，然后我们继续游戏，刷钱，然后我们看到钱数最后固定成了20000，严格上来说不算刷钱，但算是固定了钱数，如果想要更多，只需要自己设置就行了。 ​ 番外杂谈​ 作为一个tutorial我觉得以上那么多也够了，不过说实话，开都开了？要不我试试锁血干辐光？ ​ 用同样的方法，我们可以看到自己的血量满时为9，被攻击扣血1至2不等，自己也可以回复，然后类似地，我们可以找到被对应的内存地址，然后代码注入，从而实现锁血。接着你可以看到如下画面。。。 ​ ​ 不过在这里只是简单地修改了寄存器的数值，从而导致了可见的血条暴涨还有个看不出来的情况——法术是无法释放的，只能说这种修改还是太过于粗暴了。 ​ 总体来说，CE还是很强的，尤其是在对了汇编有一定了解后，这份感受就更加明显了。当然玩游戏还是少用修改的为妙，毕竟是cheat嘛，具体的也没什么好谈的，多人游戏不应该修改，说实话只用CE我都不知道能怎么修改 ，单机的话也就没什么好说了，just follow your heart。","categories":[{"name":"三言两语","slug":"三言两语","permalink":"https://ztlpluz.github.io/Opynicus.github.io/categories/%E4%B8%89%E8%A8%80%E4%B8%A4%E8%AF%AD/"}],"tags":[{"name":"游戏","slug":"游戏","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E6%B8%B8%E6%88%8F/"},{"name":"汇编","slug":"汇编","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E6%B1%87%E7%BC%96/"}]},{"title":"SpringBoot+Vue+postgreSql前后端分离起步","slug":"StartWithSpringbootAndVue","date":"2021-10-17T12:41:53.000Z","updated":"2021-10-30T14:55:27.800Z","comments":true,"path":"2021/10/17/StartWithSpringbootAndVue/","link":"","permalink":"https://ztlpluz.github.io/Opynicus.github.io/2021/10/17/StartWithSpringbootAndVue/","excerpt":"​ 前后端分离嗯造了属实是","text":"​ 前后端分离嗯造了属实是 前言​ 算是对前后端的工作衔接有些了解吧，其实并不是说它的概念多难，主要是怎么做到后端把东西给前端传输，是用什么工具怎么做的问题，正好最近在琢磨vue，然后也开始了java的学习，那么SpringBoot+Vue貌似就成了最好的实践选择，今天也算是花了差不多一天弄明白了基础的使用，走了不少弯路，在此留下一次记录，算是以后可以回来参考。 传输方式​ 基本都是用的JSON,后端SpringBoot中的@RestController(类注解)与@RequestMapping来支持任意请求，也包括@ResponseBody(方法注解)，不过起步样例没用上。 后端(IDE:Intellij Idea)Ⅰ,准备工作​ 1,先在”Plugins”中下载”Spring-Assistant”插件，下载完后重启IDE ​ 2，新建项目栏中会出现Spring Initializr这一选项，然后建立对应项目，勾选对应项。（暂时没用到数据库，故未勾选下方数据库选项） ​ 这里建立的项目为SpringBootDemo,项目目录如下，其中与主程序同级的entity包原本不存在的。 Ⅱ,Coding​ 1,在”项目名”+Application对应同级目录下建立新的包，一般来说有四种，分别是Controller(控制器层)、Entity(实体类)、Mapper(持久层)、Server(业务层)，对应项目需要，在这里我们只建立一个Entity类来作为样例。 ​ 2,然后在entity包下建立author类 ​ author.java 1234567891011121314151617181920212223242526272829package com.op.springbootdemo.entity;/** * @author Opynicus */public class author &#123; private String authorName; private String authorSite; private Integer authorAge; public author(String authorName,String authorSite,Integer authorAge) &#123; this.authorAge=authorAge; this.authorName=authorName; this.authorSite=authorSite; &#125; public Integer getAuthorAge() &#123; return authorAge; &#125; public String getAuthorName() &#123; return authorName; &#125; public String getAuthorSite() &#123; return authorSite; &#125;&#125; ​ 3,在同一包下建立authorInfo类 123456789101112131415161718package com.op.springbootdemo.entity;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;/** * @author Opyncius */@RestControllerpublic class authorInfo &#123; @RequestMapping(&quot;/authorInfo&quot;) public author getAuthorInfo() &#123; return new author(&quot;Opynicus&quot;,&quot;https://opynicus.com&quot;,99); &#125;&#125; 关于上方两个import内容的作用： ​ @RestController= @Controller + @ResponseBody ​ @Controller 将当前修饰的类注入SpringBoot IOC容器，使得从该类所在的项目跑起来的过程中，这个类就被实例化。当然也有语义化的作用，即代表该类是充当Controller的作用 ​ @ResponseBody 它的作用简短截说就是指该类中所有的API接口返回的数据，甭管你对应的方法返回Map或是其他Object，它会以Json字符串的形式返回给客户端，如果返回的是String类型，则仍然是String。 ​ 固@RestController定义在类开头，最终结果都返回JSON类型的数据 ​ @RequestMapping这玩意在我看来就像是vue中对应的路由，定义了最终JSON返回的位置，例如上述代码中/authorInfo，那么对应端口8081位置就是http://localhost:8081/authorInfo ​ plus: SpringBoot默认端口用的8080,正好和vue的默认端口冲突，需要在src/main/resources/application.properties中添加一条server.port=8081代码即可。 ​ 4,启动项目，在浏览器中输入http://localhost:8081/authorInfo,看到结果，一组简单的JSON数据接口就有了，接下来就是前端了。 ​ 前端(Vue 3.x)Ⅰ,准备工作​ 1,本人使用的是vue-cli3脚手架，然后安装了vue-router和axios，这些安装方法网上到处都有得找，这里就不再赘述。重点是axios的使用 Ⅱ,使用axios接收数据​ 1，项目结构目录如下，我们的目标是读取后端返回的JSON数据，输出到/about对应路由的页面上。 ​ 2，配置about.vue ​ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;template&gt; &lt;div class=&quot;about&quot;&gt; &lt;p&gt;This is &#123;&#123;authorName&#125;&#125;,a &#123;&#123;authorAge&#125;&#125; years old man, and My Site is &#123;&#123;authorSite&#125;&#125;&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from &quot;axios&quot;export default &#123; name: &#x27;about&#x27;, data()&#123; return&#123; // url:&#x27;https://www.opynicus.com&#x27;, authorName: &#x27;&#x27;, authorSite: &#x27;&#x27;, authorAge: &#x27;&#x27; &#125; &#125;, methods: &#123; toRescue() &#123; window.location.href = this.url; &#125;, &#125;, mounted() &#123; axios.get(&quot;http://localhost:8081/authorInfo&quot;).then(res=&gt;&#123; this.authorName=res.data.authorName, this.authorSite=res.data.authorSite, this.authorAge=res.data.authorAge &#125; ) &#125;&#125;&lt;/script&gt;&lt;style scoped&gt;.fake_a&#123; color:blueviolet; text-decoration: underline; text-shadow: 0 1px 0 darkblue,0 0 2px cyan; cursor: pointer;&#125;&lt;/style&gt; 然后发现数据并没有被读取成功，如图 打开console看报错，如此显示 上网一查，这是涉及跨域访问的问题，算是vue的一个坑点。 Ⅲ,解决跨域访问的问题1,在根目录建立vue.config.js文件,在里面进行如下配置 1234567891011121314151617181920module.exports = &#123; devServer: &#123; open: true, host: &#x27;localhost&#x27;, port: 8080, https: false, //以上的ip和端口是我们本机的;下面为需要跨域的 proxy: &#123;//配置跨域 &#x27;/api&#x27;: &#123; target: &#x27;http://localhost:8081/&#x27;,//这里后台的地址模拟的;应该填写你们真实的后台接口 ws: true, changOrigin: true,//允许跨域 pathRewrite: &#123; &#x27;^/api&#x27;: &#x27;&#x27;//请求的时候使用这个api就可以 &#125; &#125; &#125; &#125;&#125; 2，同时about.vue中在组件内部做如下修改,即将localhost:8081改为/api 123456789mounted() &#123; axios.get(&quot;/api/authorInfo&quot;).then(res=&gt;&#123; this.authorName=res.data.authorName, this.authorSite=res.data.authorSite, this.authorAge=res.data.authorAge &#125; ) 3，然后在此打开http://localhost:8080/about查看，发现成功显示 数据库相关(后添加内容)​ 1，用的postgreSql来作为实验对象,添加JDBC依赖,在配置文件中添加如下代码 123456server.port= 8081spring.datasource.driver-class-name=org.postgresql.Driverspring.datasource.url=jdbc:postgresql://localhost:5432/ENROLLEDspring.datasource.username=postgresspring.datasource.password=xxxxxxxxx ​ 2,创建查询类，例如我们查表ENROLLED中的前十位学生信息。 postgreSqlJdbcQuery.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package com.db.dbdemo;import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.Statement;import java.util.Scanner;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class postgreSqlJdbcQuery &#123; @RequestMapping(&quot;/Query&quot;) public student[] main(String[] args) &#123; Connection c = null; Statement stmt = null; try &#123; Class.forName(&quot;org.postgresql.Driver&quot;); c = DriverManager.getConnection( &quot;jdbc:postgresql://localhost:5432/ENROLLED&quot;, &quot;postgres&quot;, &quot;xxxxxxxxxx&quot;); c.setAutoCommit(false); student[] stu =new student[10]; System.out.println(&quot;连接数据库成功！&quot;); stmt = c.createStatement();// System.out.println(&quot;输入id&quot;);// Scanner scan = new Scanner(System.in);// int id = scan.nextInt(); System.out.println(&quot;查询所有student表中数据&quot;); ResultSet rs = stmt.executeQuery(&quot;select * from student limit 10&quot;); int i=0; while(rs.next())&#123; int sno = rs.getInt(&quot;sno&quot;); String sname = rs.getString(&quot;sname&quot;); String ssex = rs.getString(&quot;ssex&quot;); int sage = rs.getInt(&quot;sage&quot;); String sdept = rs.getString(&quot;sdept&quot;); System.out.println(sno + &quot;,&quot; + sname + &quot;,&quot; + ssex + &quot;,&quot; + sage + &quot;,&quot; + sdept); stu[i]= new student(sno,sname,ssex,sage,sdept); i++; &#125; rs.close(); stmt.close(); c.close(); return stu; &#125; catch (Exception e) &#123; e.printStackTrace(); System.err.println(e.getClass().getName() + &quot;: &quot; + e.getMessage()); System.exit(0); &#125; System.out.println(&quot;查询数据成功！&quot;); return null; &#125;&#125; ​ 3,然后打开对应页面可看到返回的JSON数据 不过类似在后端输入什么信息例如输id找信息这种需要先访问后台接口才能开启输入。本例是多行JSON数据，目前就想到了用类数组来解决，但Java没有动态类数组，或者说不像C++有vector那样自带的stl容器，因为不知查询的数量结果，而又需要提前给数组容量初始化，数组元素个数不能少于查询结果，而高于查询结果后面会留一堆null，虽然前端稍微改改也没事，但还是影响观感，现在想起vector的好了算是。 总结​ 样例给得确实很简单，深度也不够，但本人为了弄清楚也还是花了挺多时间的，主要时间还是花在了理解SpringBoot的使用与查找如何实现交互上，大多数例子要么只讲前端接收api，要么后端讲一半，在找到一个能当HelloWorld用的前后端分离性质的内容太少。然后就是跨域访问吧，这个还好，这个问题应该较为普遍，解决方法很好找。当然，例子也没用上数据库，主要是之前试用的时候出了问题，然后还没想到如何解决，再说吧。至少现在做个前后端分离的登陆注册页面这种是不难了。。罢。","categories":[{"name":"三言两语","slug":"三言两语","permalink":"https://ztlpluz.github.io/Opynicus.github.io/categories/%E4%B8%89%E8%A8%80%E4%B8%A4%E8%AF%AD/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/Java/"},{"name":"Vue","slug":"Vue","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/Vue/"}]},{"title":"解决hexo-blog-encrypt在自定义域名后失效的问题","slug":"crypto-and-http","date":"2021-09-29T05:51:36.000Z","updated":"2021-09-29T07:04:35.244Z","comments":true,"path":"2021/09/29/crypto-and-http/","link":"","permalink":"https://ztlpluz.github.io/Opynicus.github.io/2021/09/29/crypto-and-http/","excerpt":"问题","text":"问题 ​ 昨天刚把Index Page自定义域名，然后原博客就成为了Index Page下的二级域名，但是加密文章的解密功能失效，即输入密码敲回车没反应，打开console，报错信息如下。 123blog-encrypt.js:94 Uncaught (in promise) TypeError: Cannot read property &#x27;importKey&#x27; of undefinedat getKeyMaterial (hbe.js:94)at HTMLDivElement. (hbe.js:255) ​ 以上报错信息与js文件本身无关，因为打开localhost查看时完全没有影响。 错误原因​ Chrome强制把所有http资源尝试用 https 访问, 如果访问失败, 会明确在控制台提示加载https资源不存在, 然后退化后的http资源再默认禁止, 而且这个选项可以通过网站设置修改。为什么localhost不受影响，因为浏览器对本地页面绝对信任。 解决方法​ 将站点切换为https ​ 由于站长用的是cloudflare的域名解析服务，修改起来十分方便。 ​ 1，在cloudflare管理网站页面中，打开SSL/TLS选项 ​ ​ 2,在边缘证书中，点击始终使用 HTTPS按钮 ​ 其它未尝试方法​ 1，也可以通过Github Pages下的Enforce HTTPS选项来强制开启https。 ​ 2，如上条Enforce HTTPS无法点击，则移步此网站解决，执行脚本程序为网站添上https。 ​ 解决的过程中，参考了对应github页面issue中的内容，具体原因也在其中有说明。","categories":[{"name":"三言两语","slug":"三言两语","permalink":"https://ztlpluz.github.io/Opynicus.github.io/categories/%E4%B8%89%E8%A8%80%E4%B8%A4%E8%AF%AD/"}],"tags":[{"name":"issue","slug":"issue","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/issue/"}]},{"title":"感恩->咸因->戌大->戈一","slug":"Thanksgiving","date":"2021-09-24T12:39:00.000Z","updated":"2021-09-24T13:38:42.990Z","comments":true,"path":"2021/09/24/Thanksgiving/","link":"","permalink":"https://ztlpluz.github.io/Opynicus.github.io/2021/09/24/Thanksgiving/","excerpt":"前言绝无二心 闭嘴 弃人","text":"前言绝无二心 闭嘴 弃人 Thanksgiving报偿 报答 报德 报还 报效 报谢 璧谢 补情 不忘 酬报 酬劳 垂思 春晖 答礼 道劳 道谢 电谢 多谢 恩宠 恩赐 恩德 恩典 恩惠 恩情 恩人 恩遇 恩泽 服膺 俯念 感戴 感德 感激 感铭 感念 感纫 光宠 洪恩 眷眷 开恩 叩谢 霖雨 领情 镂心 面谢 铭感 铭刻 铭佩 铭心 难忘 人情 纫佩 神驰 衔恩 谢词 谢恩 谢客 谢礼 谢幕 谢帖 知恩 致谢 还人情 三春晖 常怀云树之思 滴水之恩,涌泉相报 君子之泽,五世而斩 知恩不报非君子,忘恩负义是小人 阿弥陀佛 报还大恩 寸草春晖 寸心铭佩 大恩大德 滴水之恩 睹物思人 恩恩怨怨 恩同再造 恩怨分明 恩重加山 感恩戴德 感恩图报 感激涕零 感慨系之 感铭斯切 感纫盛情 感同身受 歌功颂德 耿耿于怀 功德无量 皇恩浩荡 活命之恩 记忆犹新 结草衔环 结草之恩 空头人情 镂骨铭心 镂心刻骨 没齿不忘 没身不忘 没世不忘 梦魂萦绕 梦寐难忘 铭感五中 铭刻脑际 铭心刻骨 铭诸肺腑 念念不忘 念兹在兹 千恩万谢 秋水伊人 人亡物在 纫佩教益 日思夜想 生死肉骨 天高地厚 物在人亡 谢天谢地 悬肠挂肚 言犹在耳 叶落归根 一饭千金 一饭之恩 以德报德 以德报恩 以德报怨 以直报怨 萦回脑际","categories":[],"tags":[{"name":"胡言乱语","slug":"胡言乱语","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"}]}],"categories":[{"name":"自言自语","slug":"自言自语","permalink":"https://ztlpluz.github.io/Opynicus.github.io/categories/%E8%87%AA%E8%A8%80%E8%87%AA%E8%AF%AD/"},{"name":"三言两语","slug":"三言两语","permalink":"https://ztlpluz.github.io/Opynicus.github.io/categories/%E4%B8%89%E8%A8%80%E4%B8%A4%E8%AF%AD/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"效率","slug":"效率","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E6%95%88%E7%8E%87/"},{"name":"日常","slug":"日常","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E6%97%A5%E5%B8%B8/"},{"name":"总结","slug":"总结","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E6%80%BB%E7%BB%93/"},{"name":"C","slug":"C","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/C/"},{"name":"CSAPP","slug":"CSAPP","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/CSAPP/"},{"name":"游戏","slug":"游戏","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E6%B8%B8%E6%88%8F/"},{"name":"反编译","slug":"反编译","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"},{"name":"C#","slug":"C","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/C/"},{"name":"Unity","slug":"Unity","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/Unity/"},{"name":"汇编","slug":"汇编","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E6%B1%87%E7%BC%96/"},{"name":"Java","slug":"Java","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/Java/"},{"name":"Vue","slug":"Vue","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/Vue/"},{"name":"issue","slug":"issue","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/issue/"},{"name":"胡言乱语","slug":"胡言乱语","permalink":"https://ztlpluz.github.io/Opynicus.github.io/tags/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"}]}